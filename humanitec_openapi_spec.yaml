---
openapi: 3.0.0
info:
  title: Humanitec API
  version: 0.9.2
  description: |
    # Introduction
    The *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows.
    The API is a REST based API. It is based around a set of concepts:

    * Core
    * External Resources
    * Sets and Deltas

    ## Authentication
    Almost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.

    ### Bearer Authentication
    This form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure.
    New Bearer tokens can be obtained via the UI:

    1. Log into Humanitec at https://app.humanitec.io
    1. Go to **Organization Settings**
    1. Select **API tokens**
    1. Enter a *name* for the new token and click on **Generate new token**

    The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:

    ```
        curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps
    ```

    ### JWT Authentication
    This form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.)
    The token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:

    ```
        curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps
    ```

    ## Content Types
    All of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.

    ## Response Codes
    ### Success
    Any response code in the `2xx` range should be regarded as success.

    | **Code** | **Meaning** |
    | --- | --- |
    | `200` | Success |
    | `201` | Success (In future, `201` will be replaced by `200`) |
    | `204` | Success, but no content in response |

    _Note: We plan to simplify the interface by replacing 201 with 200 status codes._

    ### Failure
    Any response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.

    | **Code** | **Meaning** |
    | --- | --- |
    | `400` | General error. (Body will contain details) |
    | `401` | Attempt to access protected resource without `Authorization` Header. |
    | `403` | The `Bearer` or `JWT` does not grant access to the requested resource. |
    | `404` | Resource not found. |
    | `405` | Method not allowed |
    | `409` | Conflict. Usually indicated a resource with that ID already exists. |
    | `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. |
    | `429` | Too many requests - request rate limit has been reached. |
    | `500` | Internal Error. If it occurs repeatedly, contact support. |
  contact:
    name: API Support
    email: apiteam@humanitec.com
  x-logo:
    url: humanitec-logo.png
    altText: Humanitec logo
paths:
  "/orgs/{orgId}/apps":
    get:
      tags:
        - public
        - Application
      summary: List all Applications in an Organization.
      description:
        Listing or lists of all Applications that exist within a specific
        Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Possibly empty list of Applications.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ApplicationResponse"
                type: array
              example:
                - created_at: "2020-06-15T09:32:03Z"
                  created_by: a-user@example.com
                  envs:
                    id: development
                    name: Development
                    type: development
                  id: my-app
                  name: My Awesome App
    post:
      tags:
        - public
        - Application
      summary: Add a new Application to an Organization
      description: Creates a new Application, then adds it to the specified Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The request ID and Human-friendly name of the Application.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ApplicationRequest"
      responses:
        "201":
          description: "The Application requested.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApplicationResponse"
              example:
                created_at: "2020-06-15T09:32:03Z"
                created_by: a-user@example.com
                envs:
                  id: development
                  name: Development
                  type: development
                id: my-app
                name: My Awesome App
        "401":
          description: "The Authorization header was not present or invalid.\n\n"
        "409":
          description: "The supplied `id` clashes with an existing Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/apps/{appId}":
    get:
      tags:
        - public
        - Application
      summary: Get an existing Application
      description: Gets a specific Application in the specified Organization by ID.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The Application requested.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApplicationResponse"
              example:
                created_at: "2020-06-15T09:32:03Z"
                created_by: a-user@example.com
                envs:
                  id: development
                  name: Development
                  type: development
                id: my-app
                name: My Awesome App
        "404":
          description: "No Application with ID `appId` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - public
        - Application
      summary: Delete an Application
      description: |-
        Deleting an Application will also delete everything associated with it. This includes Environments, Deployment history on those Environments, and any shared values and secrets associated.

        _Deletions are currently irreversible._
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Application Successfully deleted.\n\n"
        "401":
          description: "The Authorization header was not present or invalid.\n\n"
        "404":
          description: "No Application with `id` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
  "/orgs/{orgId}/apps/{appId}/envs":
    get:
      tags:
        - public
        - Environment
      summary: List all Environments.
      description: Lists all of the Environments in the Application.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A list of Environments associated with an Application.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/EnvironmentResponse"
                type: array
              example:
                - {}
    post:
      tags:
        - public
        - Environment
      summary: Add a new Environment to an Application.
      description: |-
        Creates a new Environment of the specified Type and associates it with the Application specified by `appId`.

        The Environment is also initialized to the **current or past state of Deployment in another Environment**. This ensures that every Environment is derived from a previously known state. This means it is not possible to create a new Environment for an Application until at least one Deployment has occurred. (The Deployment does not have to be successful.)

        The Type of the Environment must be already defined in the Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description:
          "The ID, Name, Type, and Deployment the Environment will be derived
          from.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EnvironmentDefinitionRequest"
            example:
              from_deploy_id: e80db1a327208c1a
              id: awesome-feature
              name: Awesome Feature Dev
              namespace: awesome-namespace
              type: development
      responses:
        "200":
          description: "The new Environment.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnvironmentResponse"
              example: {}
        "400":
          description:
            "The supplied `id` is an invalid ID or a required field is
            missing.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "No Application with `id` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
        "409":
          description: "The supplied `id` clashes with an existing Environment.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was unparseable.\n\n"
    patch:
      tags:
        - public
        - Environment
      summary: Update an Environment in an Application.
      description: |-
        Updates properties on an environment. At this time, the only property that can be updated is `namespace`.

        The supplied namespace must be unique within the organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: query
          description: "The Environment ID.\n\n"
          schema:
            type: string
      requestBody:
        description: "Only the `namespace` parameter will be used.\n\n"
        required: true
        content:
          application/json:
            schema:
              additionalProperties:
                type: object
              type: object
            example:
              namespace: awesome-namespace
      responses:
        "200":
          description: "The updated Environment.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnvironmentResponse"
        "400":
          description: "The supplied patch had invalid parameters.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "Environment cannot be found in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was not parseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/envs/{envId}":
    get:
      tags:
        - public
        - Environment
      summary: Get a specific Environment.
      description: Gets a specific Environment in an Application.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The Environment requested.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnvironmentResponse"
              example: {}
        "404":
          description: "No Environment with `id` in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - public
        - Environment
      summary: Delete a specific Environment.
      description: |-
        Deletes a specific Environment in an Application.

        Deleting an Environment will also delete the Deployment history of the Environment.

        _Deletions are currently irreversible._
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Environment successfully deleted.\n\n"
        "400":
          description: "Attempt to delete the last Environment in an Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "No Environment with `envId` in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys":
    get:
      tags:
        - public
        - Deployment
      summary: List Deployments in an Environment.
      description:
        List all of the Deployments that have been carried out in the current
        Environment. Deployments are returned with the newest first.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Deployments.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/DeploymentResponse"
                type: array
              example:
                - {}
        "404":
          description: "No Environment with `id` in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - public
        - Deployment
      summary: Start a new Deployment.
      description: |-
        At Humanitec, Deployments are defined as changes to the state of the Environment. The state can be changed by defining a set of desired changes to the current state via a Deployment Delta or by resetting the current state after a previous Deployment. (See Environment Rebase.) Both types of changes can be combined into a single Deployment during which the Delta is applied to the Rebased state.

        When specifying a Delta, a Delta ID must be used. That Delta must have been committed to the Delta store prior to the Deployment.

        A Set ID can also be defined in the deployment to force the state of the environment to a particular state. This will be ignored if the Delta is specified.

        **NOTE:**

        Directly setting a `set_id` in a deployment is not recommended as it will not record history of where the set came from. If the intention is to replicate an existing environment, use the environment rebasing approach described above.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The Delta describing the change to the Environment and a comment.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeploymentRequest"
            example:
              comment: Updated version of module-one to v0.3.1
              delta_id: df1ad41807b0390a9b0eaf8688e1f5baece9d764
      responses:
        "201":
          description: "A description of the Deployment.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeploymentResponse"
        "400":
          description:
            "Error because the Delta is non-existent or incompatible with
            the state of the Environment.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "No Environment with `id` in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}":
    get:
      tags:
        - public
        - Deployment
      summary: Get a specific Deployment.
      description: Gets a specific Deployment in an Application and an Environment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
        - name: deployId
          in: path
          description: "The Deployment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The Deployment requested.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeploymentResponse"
              example: {}
        "404":
          description: "No Deployment with `deployId` in Application and Environment.\n\n"
          content:
            application/json:
              schema:
                type: string
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}/errors":
    get:
      tags:
        - public
        - Deployment
      summary: List errors that occurred in a Deployment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
        - name: deployId
          in: path
          description: "The Deployment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A List of deployment errors, could be empty.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/DeploymentErrorResponse"
                type: array
              example:
                - code: CLD-001
                  message: Incorrect credentials
                  object_id: my-service
                  scope: workload
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/from_deploy_id":
    put:
      tags:
        - public
        - Environment
      summary: Rebase to a different Deployment.
      description: |-
        Rebasing an Environment means that the next Deployment to the Environment will be based on the Deployment specified in the rebase rather than the last one in the Environment. The Deployment to rebase to can either be current or a previous Deployment. The Deployment can be from any Environment of the same Application.

        _Running code will only be affected on the next Deployment to the Environment._

        Common use cases for rebasing an Environment:

        * _Rollback_: Rebasing to a previous Deployment in the current Environment and then Deploying without additional changes will execute a rollback to the previous Deployment state.

        * _Clone_: Rebasing to the current Deployment in a different Environment and then deploying without additional changes will clone all of the configuration of the other Environment into the current one. (NOTE: External Resources will not be cloned in the process - the current External Resources of the Environment will remain unchanged and will be used by the deployed Application in the Environment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The Deployment ID to rebase to.\n\n"
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "204":
          description: "Rebase successful.\n\n"
        "400":
          description: "No Deployment with ID in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "No Environment with ID Application and Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/env-types":
    get:
      tags:
        - public
        - EnvironmentType
      summary: List all Environment Types
      description: Lists all Environment Types in an Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A list of Environment Types.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/EnvironmentTypeResponse"
                type: array
    post:
      tags:
        - public
        - EnvironmentType
      summary: Add a new Environment Type
      description: Adds a new Environment Type to an Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "New Environment Type.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EnvironmentTypeRequest"
      responses:
        "200":
          description: "The Environment Type requested.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnvironmentTypeResponse"
        "400":
          description:
            "The supplied `id` is not a valid ID or a required field is
            missing.\n\n"
          content:
            application/json:
              schema:
                type: string
        "401":
          description: "The Authorization header was not present or invalid.\n\n"
        "409":
          description: "The supplied `id` clashes with an existing Environment Type.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/env-types/{envTypeId}":
    get:
      tags:
        - public
        - EnvironmentType
      summary: Get an Environment Type
      description: Gets a specific Environment Type within an Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: envTypeId
          in: path
          description: "ID of the Environment Type.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The Environment Type requested.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnvironmentTypeResponse"
        "404":
          description: "No Environment Type with `id` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - public
        - EnvironmentType
      summary: Deletes an Environment Type
      description:
        Deletes a specific Environment Type from an Organization. If there
        are Environments with this Type in the Organization, the operation will fail.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: envTypeId
          in: path
          description: "ID of the Environment Type.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "The Environment Type requested.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnvironmentTypeResponse"
        "401":
          description: "The Authorization header was not present or invalid.\n\n"
        "404":
          description: "No Environment Type with ID `envTypeId` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
        "409":
          description: |-
            There are 1 or more Environments with this Type.

            To delete an Environment Type, there can be no Environments with that type in the Organization.
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: string
                  type: object
                type: array
              example:
                - app_id: my-app
                  env_id: awesome-feature
                - app_id: my-app
                  env_id: bugfix-7951
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/users":
    get:
      tags:
        - public
        - UserRole
      summary: List Users with roles in an Organization
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A list of Users and the roles they hold.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/UserRoleResponse"
                type: array
        "404":
          description: "Object does not exist.\n\n"
    post:
      tags:
        - public
        - UserRole
      summary: Adds a User to an Application with a Role
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The user ID and the role\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRoleRequest"
            example:
              id: 61048226-642c-438e-974f-ce5c013d94f8
              role: manager
      responses:
        "200":
          description: "The user ID and associated role.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserRoleResponse"
        "400":
          description: "Some of the values supplied are invalid.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "The specified Application was not found.\n\n"
        "422":
          description: "The request body was not parseable.\n\n"
  "/orgs/{orgId}/users":
    post:
      tags:
        - public
        - UserProfile
      summary: Creates a new service user.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The user ID and the role\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserProfileExtendedRequest"
            example:
              id: 61048226-642c-438e-974f-ce5c013d94f8
              role: manager
      responses:
        "200":
          description: "The extended user profile of the user.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserProfileExtendedResponse"
        "400":
          description: "Some of the values supplied are invalid.\n\n"
          content:
            application/json:
              schema:
                type: string
        "403":
          description: "Token is not valid for a user.\n\n"
        "422":
          description: "The request body was not parseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules":
    get:
      tags:
        - public
        - AutomationRule
      summary: List all Automation Rules in an Environment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty array of Automation Rules\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/AutomationRuleResponse"
                type: array
              example:
                - active: true
                  created_at: "2021-07-22T14:53:27Z"
                  created_by: 0dbbdc88-b125-47f1-9a96-6c4c9d6ddc70
                  exclude_images_filter: false
                  id: 923486d012f20324
                  images_filter:
                    - sample-service
                  match: "^pr-[0-9]+-.*$"
                  type: update
                  update_to: branch
    post:
      tags:
        - public
        - AutomationRule
      summary: Create a new Automation Rule for an Environment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The definition of the Automation Rule.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AutomationRuleRequest"
            example:
              active: true
              exclude_images_filter: false
              images_filter:
                - sample-service
              match: "^pr-[0-9]+-.*$"
              type: update
              update_to: branch
      responses:
        "200":
          description: "The AutomationRule\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AutomationRuleResponse"
        "400":
          description: "The input was not a valid Automation Rule.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "422":
          description: "The request body could not be processed.\n\n"
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}":
    put:
      tags:
        - public
        - AutomationRule
      summary: Update an existing Automation Rule for an Environment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          description: "The Automation Rule ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The definition of the Automation Rule.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AutomationRuleRequest"
            example:
              active: true
              exclude_images_filter: false
              images_filter:
                - sample-service
              match: "^pr-[0-9]+-.*$"
              type: update
              update_to: branch
      responses:
        "200":
          description: "The AutomationRule\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AutomationRuleResponse"
        "400":
          description: "The input was not a valid Automation Rule.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "404":
          description: "There is no automation rule with the supplied ID.\n\n"
        "422":
          description: "The request body could not be processed.\n\n"
    delete:
      tags:
        - public
        - AutomationRule
      summary: Delete Automation Rule from an Environment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          description: "The Automation Rule ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "The AutomationRule was deleted.\n\n"
        "404":
          description: "There is no automation rule with the supplied ID.\n\n"
  "/orgs/{orgId}/apps/{appId}/deltas":
    post:
      tags:
        - public
        - Delta
      summary: Create a new Delta
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          A Deployment Delta to create.

          The Deployment Delta will be added with the provided content of `modules` and the 'env_id' and 'name' properties of the 'metadata' property.

          NOTE: If the `id` property is specified, it will be ignored. A new ID will be generated and returned in the response.
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeltaRequest"
            example:
              metadata:
                env_id: feature-test
                name: "Updates for ticket # 2581"
              modules:
                updates:
                  module-one:
                    - op: add
                      path: "/spec/containers/simple-service/variables/REDIS_URL"
                      value: redis://${modules.redis-cache.service.name}
      responses:
        "200":
          description: "The requested Deployment Delta.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeltaResponse"
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}":
    patch:
      tags:
        - public
        - Delta
      summary: Update an existing Delta
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: deltaId
          in: path
          description: "ID of the Delta to update.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          An array of Deltas.

          The Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.

          * All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.

          * All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`

          * The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.

          Simplification involves:

          * Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.

          * Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.

          **Extension to JSON Patch**

          If a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{"scope": "delta"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.

          If the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.

          _NOTE: If the `id` or `metadata` properties are specified, they will be ignored._
        required: true
        content:
          application/json:
            schema:
              items:
                "$ref": "#/components/schemas/DeltaRequest"
              type: array
            example:
              - modules:
                  updates:
                    module-one:
                      - op: add
                        path: "/spec/containers/simple-service/variables/REDIS_URL"
                        value: redis://${modules.redis-cache.service.name}
      responses:
        "200":
          description: "The requested Deployment Delta.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeltaResponse"
        "400":
          description: "One or more of the Deltas were incompatible.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeltaResponse"
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/archived":
    put:
      tags:
        - public
        - Delta
      summary: Mark a Delta as "archived"
      description: Archived Deltas are still accessible but can no longer be updated.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: deltaId
          in: path
          description: "ID of the Deployment Delta.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "Either `true` or `false`.\n\n"
        required: true
        content:
          application/json:
            schema:
              type: boolean
            example: true
      responses:
        "204":
          description: "Archived state successfully updated.\n\n"
        "404":
          description: "No Deployment Delta with ID `deltaId` found in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/env_id":
    put:
      tags:
        - public
        - Delta
      summary: Change the Environment of a Delta
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: deltaId
          in: path
          description: "ID of the Deployment Delta.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description:
          "The new Environment ID. (NOTE: The string must still be JSON
          encoded.)\n\n"
        required: true
        content:
          application/json:
            schema:
              type: string
            example: new-env
      responses:
        "204":
          description: "Environment ID successfully updated.\n\n"
        "400":
          description: "No Environment with specified ID in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "No Deployment Delta with ID `deltaId` found in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/name":
    put:
      tags:
        - public
        - Delta
      summary: Change the name of a Delta
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: deltaId
          in: path
          description: "ID of the Deployment Delta.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The new name.(NOTE: The string must still be JSON encoded.)\n\n"
        required: true
        content:
          application/json:
            schema:
              type: string
            example: "Update for ticket #s 2568 & 2572"
      responses:
        "204":
          description: "Name successfully updated.\n\n"
        "404":
          description: "No Deployment Delta with ID `deltaId` found in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/sets/{setId}":
    get:
      tags:
        - public
        - Set
      summary: Get a Deployment Set
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: setId
          in: path
          description: "ID of the Deployment Set.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The Requested Deployment Set.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SetResponse"
        "404":
          description: "No Deployment Set with ID `setId` found in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - public
        - Set
      summary: Apply a Deployment Delta to a Deployment Set
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: setId
          in: path
          description: "ID of the Deployment Set.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The Delta to apply to the Set.

          NOTE: The `id` parameter is ignored if provided. The request body should be the full Delta.
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeltaRequest"
            example:
              modules:
                remove:
                  - module-one
      responses:
        "200":
          description:
            "A Deployment Delta which if applied to the Set with ID `sourceSetId`
            gives the Set with ID `setId`.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeltaResponse"
        "400":
          description:
            "Deployment Deta is incompatible with the Deployment Set specified
            by `setId`.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "No Deployment Set with ID `setId` found in Application.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was unparseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/sets/{setId}/diff/{sourceSetId}":
    get:
      tags:
        - public
        - Set
      summary: Get the difference between 2 Deployment Sets
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: setId
          in: path
          description: "ID of the Deployment Set.\n\n"
          required: true
          schema:
            type: string
        - name: sourceSetId
          in: path
          description: "ID of the Deployment Set to diff against.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            "A Deployment Delta which if applied to the Set with ID `sourceSetId`
            gives the Set with ID `setId`.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeltaResponse"
        "404":
          description:
            "No Deployment Set with ID `setId` or `sourceSetId` found in
            Application.\n\n"
          content:
            application/json:
              schema:
                type: string
  "/orgs/{orgId}/apps/{appId}/jobs":
    delete:
      tags:
        - public
        - Event
      summary: Deletes all Jobs for the Application
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Deleted successfully.\n\n"
  "/orgs/{orgId}/apps/{appId}/webhooks":
    get:
      tags:
        - public
        - Event
      summary: List Webhooks
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A list of Webhooks.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/WebhookResponse"
                type: array
    post:
      tags:
        - public
        - Event
      summary: Create a new Webhook
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WebhookRequest"
      responses:
        "201":
          description: "A created webhook.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookResponse"
        "400":
          description: "Some of the values supplied are invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "409":
          description: "The supplied `id` clashes with an existing Job.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "422":
          description: "The request body was not parsable.\n\n"
  "/orgs/{orgId}/apps/{appId}/webhooks/{jobId}":
    get:
      tags:
        - public
        - Event
      summary: Get a Webhook
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: "The Webhook ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The requested webhook.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookResponse"
        "404":
          description: "The requested webhook not found.\n\n"
    post:
      tags:
        - public
        - Event
      summary: Update a Webhook
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: "The Webhook ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WebhookRequest"
      responses:
        "200":
          description: "Updated successfully, return the webhook\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookResponse"
        "404":
          description: "The requested webhook not found.\n\n"
        "422":
          description: "The request body was not parsable.\n\n"
    delete:
      tags:
        - public
        - Event
      summary: Delete a Webhook
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: "The Webhook ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Deleted successfully\n\n"
        "404":
          description: "The requested webhook not found.\n\n"
  "/orgs/{orgId}/events":
    get:
      tags:
        - public
        - Event
      summary: List Events
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A list of Events.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/EventResponse"
                type: array
  "/orgs/{orgId}/image-sources":
    get:
      tags:
        - public
        - ImageSource
      summary: List all Image Sources
      description: Lists all of the Image Sources in an Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Possibly empty list of Image Sources.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ImageSourceResponse"
                type: array
              example:
                - created_at: "2020-06-25T09:32:03Z"
                  created_by: a-user@example.com
                  id: corporate-org-github
                  name: Github for Corporate Organization
                  token: 7c52ef0c2f22cb5139f912410507f68f0c2b47bc
                  type: github
    post:
      tags:
        - public
        - ImageSource
      summary: Add a new Image Source
      description:
        Adds a new Image Source to an Organization. This request returns
        a `token` which can be used in subsequent calls to POST /orgs/{orgId}/images/{imageId}/builds
        to notify Huamnitec about new Image Builds.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The ID and Human-friendly name of the new Image Source.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImageSourceRequest"
            example:
              id: corporate-org-github
              name: Github for Corporate Organization
      responses:
        "201":
          description: "Image Source successfully added.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageSourceResponse"
        "400":
          description:
            "The supplied `id` is not a valid ID or a required field is
            missing.\n\n"
          content:
            application/json:
              schema:
                type: string
        "409":
          description: "The supplied `id` clashes with an existing Image Source.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was not parseable.\n\n"
  "/orgs/{orgId}/image-sources/{sourceId}":
    get:
      tags:
        - public
        - ImageSource
      summary: Get specific Image Source
      description: Gets a specific Image Source in an Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          description: "ID of the Image Source.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The requested Image Source.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageSourceResponse"
              example:
                created_at: "2020-06-25T09:32:03Z"
                created_by: a-user@example.com
                id: corporate-org-github
                name: Github for Corporate Organization
                token: 7c52ef0c2f22cb5139f912410507f68f0c2b47bc
                type: github
        "404":
          description: "No Image Source with an ID of `sourceId` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - public
        - ImageSource
      summary: Delete an Image Source
      description: |-
        Deletes an Image Source.  Deleting an Image Source **does not** delete the associated images.

        Deleting Image Sources revokes the `token`. This means that any systems using the token in order to notify the platform will be unable to do so.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          description: "ID of the Image Source.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Image Source successfully deleted.\n\n"
        "404":
          description: "No Image Source with an ID of `sourceId` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
  "/orgs/{orgId}/images":
    get:
      tags:
        - public
        - Image
      summary: List all Container Images
      description: Lists all of the Container Images registered for this organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Possibly empty list of Container Images.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ImageResponse"
                type: array
              example:
                - added_at: "2020-05-12T16:12:13Z"
                  builds:
                    - added_at: "2020-06-25T19:37:22Z"
                      branch: master
                      commit: 884bccaa807ea27cc1997a7492a3b6279fd7bd55
                      image: registry.humanitec.io/my-org/my-service:1.2.7
                  id: my-service
                  source: github
  "/orgs/{orgId}/images/{imageId}":
    get:
      tags:
        - public
        - Image
      summary: Get a specific Image Object
      description: |-
        The response includes a list of Image Builds as well as some metadata about the Image such as its Image Source.

        Note, `imageId` may not be the same as the container name. `imageId` is determined by the system making notifications about new builds.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: imageId
          in: path
          description: "The Image ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The Image Object requested.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageResponse"
              example:
                added_at: 22020-06-25T17:41:57Z
                builds:
                  - added_at: "2020-06-25T19:37:22Z"
                    branch: master
                    commit: 884bccaa807ea27cc1997a7492a3b6279fd7bd55
                    image: registry.humanitec.io/my-org/my-service:1.2.7
                  - added_at: "2020-06-25T17:41:57Z"
                    branch: master
                    commit: 060c3d6530a881afb808f105f36af25e1ad1b2f3
                    image: registry.humanitec.io/my-org/my-service:1.2.6
                id: my-service
                source: github
        "404":
          description: "No Image with an ID of `imageId` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
  "/orgs/{orgId}/images/{imageId}/builds":
    get:
      tags:
        - public
        - Image
      summary: Lists all the Builds of an Image
      description: The response includes a list of Image Builds.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: imageId
          in: path
          description: "The Image ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Possibly empty list of Builds of Container Images.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ImageBuildResponse"
                type: array
              example:
                - added_at: "2020-06-25T19:37:22Z"
                  branch: master
                  commit: 884bccaa807ea27cc1997a7492a3b6279fd7bd55
                  image: registry.humanitec.io/my-org/my-service:1.2.7
                - added_at: "2020-06-25T17:41:57Z"
                  branch: master
                  commit: 060c3d6530a881afb808f105f36af25e1ad1b2f3
                  image: registry.humanitec.io/my-org/my-service:1.2.6
        "404":
          description: "No Image with an ID of `imageId` in Organization.\n\n"
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - public
        - Image
      summary: Add a new Image Build
      description: |-
        This endpoint is used by Continuous Integration (CI) pipelines to notify Humanitec that a new Image Build is available.

        If there is no Image with ID `imageId`, it will be automatically created. The Image Source is determined via the Bearer Token supplied in the request.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: imageId
          in: path
          description: "The Image ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The metadata associated with the build.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImageBuildRequest"
            example:
              branch: master
              commit: 884bccaa807ea27cc1997a7492a3b6279fd7bd55
              image: registry.humanitec.io/my-org/my-service:1.2.7
      responses:
        "204":
          description: "Build successfully added.\n\n"
        "400":
          description: "The supplied `imageId` is invalid or a required field is missing.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was not parseable.\n\n"
  "/orgs":
    get:
      tags:
        - public
        - Organization
      summary: List active organizations the user has access to.
      responses:
        "200":
          description:
            "A list of available organizations (based on the current user
            access level).\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/OrganizationResponse"
                type: array
        "401":
          description: "Required HTTP Authorization header is missing or malformed.\n\n"
        "403":
          description: "Current user is not authorized to perform the request.\n\n"
  "/orgs/{orgId}":
    get:
      tags:
        - public
        - Organization
      summary: Get the specified Organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Returns organization details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OrganizationResponse"
        "400":
          description:
            "Invalid request parameters or payload. E.g. invalid `orgId`
            format.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "401":
          description: "Required HTTP Authorization header is missing or malformed.\n\n"
        "403":
          description: "Current user is not authorized to perform the request.\n\n"
        "409":
          description: "Organization can't be accessed with this request.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
  "/orgs/{orgId}/registries":
    get:
      tags:
        - public
        - Registry
      summary: Lists available registries for the organization.
      parameters:
        - name: orgId
          in: path
          description: "Unique (alpha-numerical) organization identifier.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A Possibly empty list of Registries.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/RegistryResponse"
                type: array
        "400":
          description: "Request parameters are incomplete or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "404":
          description: "Specified 'orgId' does not match any record.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
    post:
      tags:
        - public
        - Registry
      summary: Creates a new registry record.
      parameters:
        - name: orgId
          in: path
          description: "Unique (alpha-numerical) organization identifier.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "A new record details.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RegistryRequest"
      responses:
        "201":
          description: "A newly created record details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RegistryResponse"
        "400":
          description: "Request parameters or payload are incomplete or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "404":
          description: "Specified 'orgId' does not match any record.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "409":
          description:
            "The record with the same ID or name (prefix) already exists
            within the organization.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
  "/orgs/{orgId}/registries/{regId}":
    get:
      tags:
        - public
        - Registry
      summary: Loads a registry record details.
      parameters:
        - name: orgId
          in: path
          description: "Unique (alpha-numerical) organization identifier.\n\n"
          required: true
          schema:
            type: string
        - name: regId
          in: path
          description: "Unique (alpha-numerical) registry identifier.\n\n"
          required: true
          schema:
            type: string
      responses:
        "201":
          description: "A registry details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RegistryResponse"
        "400":
          description: "Request parameters are incomplete or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "404":
          description: "Specified 'orgId' or 'regId' do not match any record.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
    delete:
      tags:
        - public
        - Registry
      summary:
        Deletes an existing registry record and all associated credentials
        and secrets.
      description: _Deletions are currently irreversible._
      parameters:
        - name: orgId
          in: path
          description: "Unique (alpha-numerical) organization identifier.\n\n"
          required: true
          schema:
            type: string
        - name: regId
          in: path
          description: "Unique (alpha-numerical) registry identifier.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Deleted successfully.\n\n"
        "400":
          description: "Request parameters are incomplete or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "403":
          description: "Built-in 'humanitec' registry can't be deleted.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "404":
          description: "Specified 'orgId' or 'regId' do not match any record.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
    patch:
      tags:
        - public
        - Registry
      summary: Updates (patches) an existing registry record.
      parameters:
        - name: orgId
          in: path
          description: "Unique (alpha-numerical) organization identifier.\n\n"
          required: true
          schema:
            type: string
        - name: regId
          in: path
          description: "Unique (alpha-numerical) registry identifier.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "Record details to update.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RegistryRequest"
      responses:
        "200":
          description: "Updated record details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RegistryResponse"
        "400":
          description: "Request parameters or payload are incomplete or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "403":
          description: "Built-in 'humanitec' registry can't be changed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "404":
          description: "Specified 'orgId' or 'regId' do not match any record.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "409":
          description:
            "The record with the same name (prefix) already exists within
            the organization.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
  "/orgs/{orgId}/registries/{regId}/creds":
    get:
      tags:
        - public
        - Registry
      summary: Returns current account credentials or secret details for the registry.
      parameters:
        - name: orgId
          in: path
          description: "Unique (alpha-numerical) organization identifier.\n\n"
          required: true
          schema:
            type: string
        - name: regId
          in: path
          description: "Unique (alpha-numerical) registry identifier.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Current account credentials or secret details for the registry.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RegistryCredsResponse"
        "400":
          description: "Request parameters are incomplete or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
        "404":
          description: "Specified 'orgId' or 'regId' do not match any record.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorInfoResponse"
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/resources":
    get:
      tags:
        - public
        - ActiveResource
      summary: List Active Resources provisioned in an environment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Active Resources.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ActiveResourceResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/account-types":
    get:
      tags:
        - public
        - AccountType
      summary: List Resource Account Types available to the organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Resources Accounts Types.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/AccountTypeResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/accounts":
    get:
      tags:
        - public
        - ResourceAccount
      summary: List Resource Accounts in the organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Resources Accounts.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ResourceAccountResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
    post:
      tags:
        - public
        - ResourceAccount
      summary: Create a new Resource Account in the organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateResourceAccountRequestRequest"
      responses:
        "200":
          description: "The newly created Resources Account details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResourceAccountResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "409":
          description: "A Resources Account already exists.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/accounts/{accId}":
    get:
      tags:
        - public
        - ResourceAccount
      summary: Get a Resource Account.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: accId
          in: path
          description: "The Resource Account ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The requested Resources Account.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResourceAccountResponse"
        "404":
          description:
            "A Resource Account with the 'accId' ID is not found or does
            not belong to the organization.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
    patch:
      tags:
        - public
        - ResourceAccount
      summary: Update a Resource Account.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: accId
          in: path
          description: "The Resource Account ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateResourceAccountRequestRequest"
      responses:
        "200":
          description: "The updated Resource Account details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResourceAccountResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "404":
          description:
            "A Resource Account with the 'accId' ID is not found or does
            not belong to the organization.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/defs":
    get:
      tags:
        - public
        - ResourceDefinition
      summary: List Resource Definitions.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Resources Definitions.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ResourceDefinitionResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
    post:
      tags:
        - public
        - ResourceDefinition
      summary: Create a new Resource Definition.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The Resource Definition details.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateResourceDefinitionRequestRequest"
      responses:
        "200":
          description: "The newly created Resources Definition details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResourceDefinitionResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "409":
          description: "A Resources Definition already exists.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/defs/{defId}":
    get:
      tags:
        - public
        - ResourceDefinition
      summary: Get a specific Resource Definition.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: defId
          in: path
          description: "The Resource Definition ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The requested Resources Definition details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResourceDefinitionResponse"
        "404":
          description: "A Resource Definition with the 'defId' ID is not found.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
    delete:
      tags:
        - public
        - ResourceDefinition
      summary: Delete a Resource Definition.
      description: |-
        If there **are no** Active Resources provisioned via the current definition, the Resource Definition is deleted immediately.

        If there **are** Active Resources provisioned via the current definition, the request fails. The response will describe the changes to the affected Active Resources if operation is forced.

        The request can take an optional `force` query parameter. If set to `true`, the current Resource Definition is **marked as** pending deletion and will be deleted (purged) as soon as no existing Active Resources reference it. With the next deployment matching criteria for Resources will be re-evaluated, and current Active Resources for the target environment would be either linked to another matching Resource Definition or decommissioned and created using the new or default Resource Definition (when available).

        The Resource Definition that has been marked for deletion cannot be used to provision new resources.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: defId
          in: path
          description: "The Resource Definition ID.\n\n"
          required: true
          schema:
            type: string
        - name: force
          in: query
          description:
            "If set to `true`, will mark the Resource Definition for deletion,
            even if it affects existing Active Resources.\n\n"
          schema:
            type: boolean
      responses:
        "204":
          description: "Resource Definition has been marked for deletion.\n\n"
        "404":
          description:
            "A Resource Driver with the 'driverId' ID is not found or is
            not accessible by the organization.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "409":
          description:
            "List of Active Resources that still reference this Resource
            Definition.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ResourceDefinitionChangeResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
    patch:
      tags:
        - public
        - ResourceDefinition
      summary: Update a Resource Definition.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: defId
          in: path
          description: "The Resource Definition ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The Resource Definition record details.

          The PATCH operation would change the value of the property if it is included in the request payload JSON, and not `null`. Missing and `null` properties are ignored.

          For the map properties, such as UpdateResourceDefinitionRequest.ResourceParams and UpdateResourceDefinitionRequest.DriverParams, the merge operation is applied.

          Merge rules are as follows:

          - If a map property has a value, it is replaced (or added).

          - If a map property is set to `null`, it is removed.

          - If a map property is not included (missing in JSON), it remains unchanged.
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateResourceDefinitionRequestRequest"
      responses:
        "200":
          description: "The updated Resource Definition.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResourceDefinitionResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "404":
          description: "A Resource Definition with the 'defId' ID is not found.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/defs/{defId}/criteria":
    post:
      tags:
        - public
        - ResourceDefinition
        - MatchingCriteria
      summary: Add a new Matching Criteria to a Resource Definition.
      description: |-
        Matching Criteria are combined with Resource Type to select a specific definition. Matching Criteria can be set for any combination of Application ID, Environment ID, Environment Type, and Resource ID. In the event of multiple matches, the most specific match is chosen.

        For example, given 3 sets of matching criteria for the same type:

        ```
         1. {"env_type":"test"}
         2. {"env_type":"development"}
         3. {"env_type":"test", "app_id":"my-app"}
        ```

        If, a resource of that time was needed in an Application `my-app`, Environment `qa-team` with Type `test` and Resource ID `modules.my-module-externals.my-resource`, there would be two resources definitions matching the criteria: #1 & #3. Definition #3 will be chosen because it's matching criteria is the most specific.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: defId
          in: path
          description: "The Resource Definition ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "Matching Criteria rules.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MatchingCriteriaRuleRequest"
            example:
              env_id: production
      responses:
        "200":
          description: "The newly added Matching Criteria details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MatchingCriteriaResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "409":
          description: "A Matching Criteria already exists.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/defs/{defId}/criteria/{criteriaId}":
    delete:
      tags:
        - public
        - ResourceDefinition
        - MatchingCriteria
      summary: Delete a Matching Criteria from a Resource Definition.
      description: |-
        If there **are no** Active Resources that would match to a different Resource Definition when the current Matching Criteria is deleted, the Matching Criteria is deleted immediately.

        If there **are** Active Resources that would match to a different Resource Definition, the request fails with HTTP status code 409 (Conflict). The response content will list all of affected Active Resources and their new matches.

        The request can take an optional `force` query parameter. If set to `true`, the Matching Criteria is deleted immediately. Referenced Active Resources would match to a different Resource Definition during the next deployment in the target environment.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: defId
          in: path
          description: "The Resource Definition ID.\n\n"
          required: true
          schema:
            type: string
        - name: criteriaId
          in: path
          description: "The Matching Criteria ID.\n\n"
          required: true
          schema:
            type: string
        - name: force
          in: query
          description:
            "If set to `true`, the Matching Criteria is deleted immediately,
            even if this action affects existing Active Resources.\n\n"
          schema:
            type: boolean
      responses:
        "204":
          description: "Record deleted.\n\n"
        "404":
          description: "The Resource Definition is not found.\n\n"
          content:
            application/json:
              schema:
                type: string
        "409":
          description:
            "One or more Active Resources reference the Resource Definition
            through this Matching Criteria.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ResourceDefinitionChangeResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/defs/{defId}/resources":
    get:
      tags:
        - public
        - ResourceDefinition
        - ActiveResource
      summary: List Active Resources provisioned via a specific Resource Definition.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: defId
          in: path
          description: "The Resource Definition ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Active Resources.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ActiveResourceResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/drivers":
    get:
      tags:
        - public
        - DriverDefinition
      summary: List Resource Drivers.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Resources Drivers.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/DriverDefinitionResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
    post:
      tags:
        - public
        - DriverDefinition
      summary: Register a new Resource Driver.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "Resources Driver details.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateDriverRequestRequest"
      responses:
        "200":
          description: "The newly registered Resources Driver details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DriverDefinitionResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "409":
          description: "A Resources Driver already exists.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/drivers/{driverId}":
    get:
      tags:
        - public
        - DriverDefinition
      summary: Get a Resource Driver.
      description:
        Only drivers that belongs to the given organization or registered
        as `public` are accessible through this endpoint
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: driverId
          in: path
          description: "The Resource Driver ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The requested Resources Driver details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DriverDefinitionResponse"
        "404":
          description:
            "A Resource Driver with the 'driverId' ID is not found or is
            not accessible by the organization.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
    put:
      tags:
        - public
        - DriverDefinition
      summary: Update a Resource Driver.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: driverId
          in: path
          description: "The Resource Driver ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateDriverRequestRequest"
      responses:
        "200":
          description: "The updated Resources Driver details.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DriverDefinitionResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "404":
          description: "A Resources Driver with the 'driverId' ID is not found.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
    delete:
      tags:
        - public
        - DriverDefinition
      summary: Delete a Resources Driver.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: driverId
          in: path
          description: "The Resources Driver ID to delete.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Record deleted.\n\n"
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/resources/static/{defId}":
    patch:
      tags:
        - public
        - StaticDefinition
      summary: Update a Static Resource Definition
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: defId
          in: path
          description: "The Resource Definition ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          An object containing the values to update.

          Only `data` and `driver_params` can be updated. If a property should be removed, it can be set to `null`. Missing properties indicate that the value should remain unchanged.

          Any top level properties other than `data` and `driver_params` are ignored.
        required: true
        content:
          application/json:
            schema:
              additionalProperties:
                type: object
              type: object
            example:
              data:
                secrets:
                  password: newPasword
                values:
                  host: my-other-app.example.com
                  require_ssl:
              driver_data: {}
      responses:
        "200":
          description: "The updated Static Resource Definitions.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StaticDefinitionResponse"
        "400":
          description: "Some of the values supplied are invalid.\n\n"
          content:
            application/json:
              schema:
                type: string
        "404":
          description: "No static resource with that ID found.\n\n"
          content:
            application/json:
              schema:
                type: string
        "422":
          description: "The request body was not parseable.\n\n"
  "/orgs/{orgId}/resources/types":
    get:
      tags:
        - public
        - ResourceType
      summary: List Resource Types.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Resources Types.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ResourceTypeResponse"
                type: array
        "500":
          description: "Internal application error.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime":
    get:
      tags:
        - public
        - RuntimeInfo
      summary: Get a Runtime information for the environment
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Runtime info returned.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RuntimeInfoResponse"
        "404":
          description: "Environment not found.\n\n"
        "500":
          description: "Some unrecoverable error.\n\n"
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime/replicas":
    patch:
      tags:
        - public
        - RuntimeInfo
      summary: Set number of replicas for the environment's modules
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "map of replicas by modules\n\n"
        required: true
        content:
          application/json:
            schema:
              additionalProperties:
                type: integer
              type: object
      responses:
        "204":
          description: "Success.\n\n"
        "403":
          description: "Forbidden (default cluster limitations).\n\n"
        "404":
          description: "Environment not found.\n\n"
        "420":
          description: "Invalid payload\n\n"
        "500":
          description: "Some unrecoverable error.\n\n"
        "501":
          description: "The provider is not supported.\n\n"
  "/current-user":
    get:
      tags:
        - public
        - UserProfile
      summary: Gets the extended profile of the current user
      responses:
        "200":
          description: "The extended user profile of the user.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserProfileExtendedResponse"
        "401":
          description: "No token supplied.\n\n"
        "403":
          description: "Token is not valid for a user.\n\n"
    patch:
      tags:
        - public
        - UserProfile
      summary: Updates the extended profile of the current user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserProfileExtendedRequest"
      responses:
        "200":
          description: "The extended user profile of the user.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserProfileExtendedResponse"
        "401":
          description: "No token supplied.\n\n"
        "403":
          description: "Token is not valid for a user.\n\n"
  "/orgs/{orgId}/apps/{appId}/users/{userId}":
    get:
      tags:
        - public
        - UserRole
      summary: Get the role of a User on an Application
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "The User ID\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The information on the user.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserRoleResponse"
        "404":
          description: "Object does not exist.\n\n"
  "/orgs/{orgId}/env-type/{envType}/users/{userId}":
    get:
      tags:
        - public
        - UserRole
      summary: Get the role of a User on an Environment Type
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: envType
          in: path
          description: "The Environment Type.\n\n"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "The User ID\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The information on the user.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserRoleResponse"
        "404":
          description: "Object does not exist.\n\n"
  "/orgs/{orgId}/invitations":
    get:
      tags:
        - public
        - UserInvite
      summary: List the invites issued for the organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The list of the invites issued for the organization.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/UserInviteResponse"
                type: array
    post:
      tags:
        - public
        - UserRole
      summary: Invites a user to an Organization with a specified role.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "The email and the desired role\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserInviteRequestRequest"
            example:
              email: jane.gonzales@example.com
              role: manager
      responses:
        "200":
          description: "An temporary profile for the invited user.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/UserRoleResponse"
                type: array
        "404":
          description: "Object does not exist.\n\n"
  "/tokens":
    get:
      tags:
        - public
        - UserProfile
      summary: DEPRECATED
      responses:
        "200":
          description: "The token structure.\n\n"
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
  "/tokens/{tokenId}":
    delete:
      tags:
        - public
        - UserProfile
      summary: DEPRECATED
      parameters:
        - name: tokenId
          in: path
          description: "The token ID\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Deleted\n\n"
  "/users/me":
    get:
      tags:
        - public
        - UserProfile
      summary: DEPRECATED
      responses:
        "200":
          description: "The extended user profile of the user.\n\n"
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
        "401":
          description: "No token supplied.\n\n"
        "403":
          description: "Token is not valid for a user.\n\n"
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/values":
    get:
      tags:
        - public
        - Value
      summary: List Shared Values in an Environment
      description:
        The returned values will be the base Application values with the
        Environment overrides where applicable. The `source` field will specify the
        level from which the value is from.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Values.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ValueResponse"
                type: array
    post:
      tags:
        - public
        - Value
      summary: Create a Shared Value for an Environment
      description: |-
        The Shared Value created will only be available to the specific Environment.

        If a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "Definition of the new Shared Value.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ValueRequest"
      responses:
        "201":
          description: "Shared Value successfully created.\n\n"
        "400":
          description: "Input not valid.\n\n"
        "409":
          description: "Shared Value already exists.\n\n"
        "422":
          description: "The request body was not parseable.\n\n"
    delete:
      tags:
        - public
        - Value
      summary: Delete all Shared Value for an Environment
      description:
        All Shared Values will be permanently deleted. If the Shared Values
        are marked as a secret, they will also be permanently deleted.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Shared Value successfully deleted.\n\n"
  "/orgs/{orgId}/apps/{appId}/envs/{envId}/values/{key}":
    put:
      tags:
        - public
        - Value
      summary: Update Shared Value for an Environment
      description:
        Update the value or description of the Shared Value. Shared Values
        marked as secret can also be updated.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: "The key to update.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description:
          "Both `value` and `description` must be supplied. All other fields
          will be ignored.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ValueRequest"
      responses:
        "201":
          description: "Shared Value successfully updated.\n\n"
        "400":
          description: "Input not valid.\n\n"
        "404":
          description: "Shared Value does not exist.\n\n"
        "422":
          description: "The request body was not parseable.\n\n"
    delete:
      tags:
        - public
        - Value
      summary: Delete Shared Value for an Environment
      description:
        The specified Shared Value will be permanently deleted. If the
        Shared Value is marked as a secret, it will also be permanently deleted.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: envId
          in: path
          description: "The Environment ID.\n\n"
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: "The key to update.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Shared Value successfully deleted.\n\n"
        "400":
          description: "Input not valid.\n\n"
        "404":
          description: "Shared Value does not exist.\n\n"
  "/orgs/{orgId}/apps/{appId}/values":
    get:
      tags:
        - public
        - Value
      summary: List Shared Values in an Application
      description:
        The returned values will be the "base" values for the Application.
        The overridden value for the Environment can be retrieved via the `/orgs/{orgId}/apps/{appId}/envs/{envId}/values`
        endpoint.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Values.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ValueResponse"
                type: array
    post:
      tags:
        - public
        - Value
      summary: Create a Shared Value for an Application
      description: |-
        The Shared Value created will be available to all Environments in that Application.

        If a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "Definition of the new Shared Value.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ValueRequest"
      responses:
        "201":
          description: "Shared Value successfully created.\n\n"
        "400":
          description: "Input not valid.\n\n"
        "409":
          description: "Shared Value already exists.\n\n"
        "422":
          description: "The request body was not parseable.\n\n"
  "/orgs/{orgId}/apps/{appId}/values/{key}":
    put:
      tags:
        - public
        - Value
      summary: Update Shared Value for an Application
      description:
        Update the value or description of the Shared Value. Shared Values
        marked as secret can also be updated.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: "The key to update.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description:
          "Both `value` and `description` must be supplied. All other fields
          will be ignored.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ValueRequest"
      responses:
        "201":
          description: "Shared Value successfully updated.\n\n"
        "400":
          description: "Input not valid.\n\n"
        "404":
          description: "Shared Value does not exist.\n\n"
        "422":
          description: "The request body was not parseable.\n\n"
    delete:
      tags:
        - public
        - Value
      summary: Delete Shared Value for an Application
      description:
        The specified Shared Value will be permanently deleted. If the
        Shared Value is marked as a secret, it will also be permanently deleted.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: "The Application ID.\n\n"
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: "The key to update.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Shared Value successfully deleted.\n\n"
        "400":
          description: "Input not valid.\n\n"
        "404":
          description: "Shared Value does not exist.\n\n"
  "/orgs/{orgId}/workload-profiles":
    get:
      tags:
        - public
        - WorkloadProfile
      summary: List workload profiles available to the organization.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Workload Profiles.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/WorkloadProfileResponse"
                type: array
    post:
      tags:
        - public
        - WorkloadProfile
      summary: Create new Workload Profile
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "Workload profile details.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WorkloadProfileRequest"
      responses:
        "200":
          description: "The newly created Workload Profile.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkloadProfileResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "409":
          description: "A Workload Profile already exists.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/workload-profiles/{profileId}":
    delete:
      tags:
        - public
        - WorkloadProfile
      summary: Delete a Workload Profile
      description: |-
        This will also delete all versions of a workload profile.

        It is not possible to delete profiles of other organizations.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: profileId
          in: path
          description: "The Workload profile ID.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "The Workload Profile has been marked for deletion.\n\n"
        "404":
          description:
            "The Workload Profile is not found or is not accessible by
            the organization.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/workload-profiles/{profileId}/versions":
    post:
      tags:
        - public
        - WorkloadProfile
      summary: Add new Version of the Workload Profile
      description: |-
        Creates a Workload Profile Version from the uploaded Helm chart. The version is retrieved from the chart's metadata (Charts.yaml file).

        The request has content type `multipart/form-data` and the request body includes two parts:

        1. `file` with `application/x-gzip` content type which is an archive containing a Helm chart.

        2. `metadata` with `application/json` content type which defines the version's metadata.

        Request body example:

        ```
            Content-Type: multipart/form-data; boundary=----boundary
            ----boundary
            Content-Disposition: form-data; name="metadata"
            Content-Type: application/json; charset=UTF-8
            {
              "features": {
                 "humanitec/service": {},
                 "humanitec/volumes": {},
                 "custom": {"schema": {}}
              },
              "notes": "Notes related to this version of the profile"
            }
            ----boundary
            Content-Disposition: form-data; name="file"; filename="my-workload-1.0.1.tgz"
            Content-Type: application/x-gzip
            [TGZ_DATA]
            ----boundary
        ```

        **NOTE:**

        A Workload Profile must be created before a version can be added to it.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: profileId
          in: path
          description: "The Workload Profile ID.\n\n"
          required: true
          schema:
            type: string
      requestBody:
        description: "Workload profile version metadata.\n\n"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WorkloadProfileVersionRequest"
      responses:
        "200":
          description: "The newly created Workload Profile Version metadata.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkloadProfileVersionResponse"
        "400":
          description: "One or more request parameters is missing or invalid.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "409":
          description: "A Workload Profile Version already exists.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
        "422":
          description: "Request payload is not provided or malformed.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/workload-profiles/{profileId}/versions/{version}":
    delete:
      tags:
        - public
        - WorkloadProfile
      summary: Delete a Workload Profile Version
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: profileId
          in: path
          description: "The Workload profile ID.\n\n"
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: "The Version.\n\n"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "The Workload Profile Version has been marked for deletion.\n\n"
        "404":
          description:
            "The Workload Profile Version is not found or is not accessible
            by the organization.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/workload-profiles/{profileQid}":
    get:
      tags:
        - public
        - WorkloadProfile
      summary: Get a Workload Profile
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: profileQid
          in: path
          description:
            "The fully qualified Workload ID. (If not a profile from the
            current org, must be prefixed with `{orgId}.` e.g. `humanitec.default-cronjob`)\n\n"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The requested WorkloadProfile.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkloadProfileResponse"
        "404":
          description: "The requested WorkloadProfile is not found.\n\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HumanitecErrorResponse"
  "/orgs/{orgId}/workload-profiles/{profileQid}/versions":
    get:
      tags:
        - public
        - WorkloadProfile
      summary: List versions of the given workload profile with optional constraint.
      parameters:
        - name: orgId
          in: path
          description: "The Organization ID.\n\n"
          required: true
          schema:
            type: string
        - name: profileQid
          in: path
          description: "The Workload profile qualified ID.\n\n"
          required: true
          schema:
            type: string
        - name: version
          in: query
          description:
            "Optional query parameter, defines version constraint pattern
            (https://github.com/Masterminds/semver#checking-version-constraints).\n\n"
          schema:
            type: string
      responses:
        "200":
          description: "A possibly empty list of Workload Profile Versions.\n\n"
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/WorkloadProfileVersionResponse"
                type: array
components:
  schemas:
    ApplicationRequest:
      description: |-
        An Application is a collection of Modules that work together. When deployed, all Modules in an Application are deployed to the same namespace.

        Apps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.
      example:
        created_at: "2020-05-22T14:53:27Z"
        created_by: a.user@example.com
        envs:
          - id: my-env
            name: My Environment
        id: my-app
        name: My Application
      properties:
        id:
          description: The ID which refers to a specific application.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The Human-friendly name for the Application.
          type: string
      required:
        - id
        - name
      type: object
    ApplicationResponse:
      description: |-
        An Application is a collection of Modules that work together. When deployed, all Modules in an Application are deployed to the same namespace.

        Apps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.
      example:
        created_at: "2020-05-22T14:53:27Z"
        created_by: a.user@example.com
        envs:
          - id: my-env
            name: My Environment
        id: my-app
        name: My Application
      properties:
        created_at:
          description: The timestamp in UTC indicates when the Application was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created the Application.
          type: string
        envs:
          description: The Environments associated with the Application.
          items:
            "$ref": "#/components/schemas/EnvironmentBaseResponse"
          type: array
        id:
          description: The ID which refers to a specific application.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The Human-friendly name for the Application.
          type: string
      required:
        - id
        - name
      type: object
    DeploymentErrorRequest:
      description: DeploymentError is an error happening during deployment
      example:
        code: CLD-001
        message: Incorrect cloud provider credentials
        object_id: my-workload
        scope: workload
        summary: Provider error
      properties:
        code:
          type: string
        message:
          type: string
        object_id:
          type: string
        scope:
          type: string
        summary:
          type: string
      type: object
    DeploymentErrorResponse:
      description: DeploymentError is an error happening during deployment
      example:
        code: CLD-001
        message: Incorrect cloud provider credentials
        object_id: my-workload
        scope: workload
        summary: Provider error
      properties:
        code:
          type: string
        message:
          type: string
        object_id:
          type: string
        scope:
          type: string
        summary:
          type: string
      type: object
    DeploymentRequest:
      description: |-
        Deployments represent updates to the running state of an Environment.

        Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
      example:
        comment: Updated version of module-one to v0.3.1
        created_at: "2020-05-22T14:58:07Z"
        created_by: a.user@example.com
        delta_id: df1ad41807b0390a9b0eaf8688e1f5baece9d764
        env_id: my-env
        from_id: 42d4b302fd3c
        id: 67f1619a57d
        status: in progress
        status_changed_at: "2020-05-22T14:59:01Z"
      properties:
        comment:
          description:
            An optional comment to help communicate the purpose of the
            Deployment.
          type: string
        delta_id:
          description:
            ID of the Deployment Delta describing the changes to the current
            Environment for this Deployment.
          type: string
      type: object
    DeploymentResponse:
      description: |-
        Deployments represent updates to the running state of an Environment.

        Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
      example:
        comment: Updated version of module-one to v0.3.1
        created_at: "2020-05-22T14:58:07Z"
        created_by: a.user@example.com
        delta_id: df1ad41807b0390a9b0eaf8688e1f5baece9d764
        env_id: my-env
        from_id: 42d4b302fd3c
        id: 67f1619a57d
        status: in progress
        status_changed_at: "2020-05-22T14:59:01Z"
      properties:
        comment:
          description:
            An optional comment to help communicate the purpose of the
            Deployment.
          type: string
        created_at:
          description: The Timestamp of when the Deployment was initiated.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who initiated the Deployment.
          type: string
        delta_id:
          description:
            ID of the Deployment Delta describing the changes to the current
            Environment for this Deployment.
          type: string
        env_id:
          description: The Environment where the Deployment occurred.
          type: string
        export_file:
          type: string
        export_status:
          type: string
        from_id:
          description: The ID of the Deployment that this Deployment was based on.
          type: string
        id:
          description: The ID of the Deployment.
          type: string
        set_id:
          description:
            ID of the Deployment Set describing the state of the Environment
            after Deployment.
          type: string
        status:
          description:
            The current status of the Deployment. Can be `pending`, `in
            progress`, `succeeded`, or `failed`.
          type: string
        status_changed_at:
          description:
            The timestamp of the last `status` change. If `status` is `succeeded`
            or `failed` it it will indicate when the Deployment finished.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
      type: object
    EnvironmentBaseRequest:
      properties:
        id:
          description: The ID the Environment is referenced as.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The Human-friendly name for the Environment.
          type: string
        namespace:
          description: The Environment namespace.
          type: string
        type:
          description:
            The Environment Type. This is used for organizing and managing
            Environments.
          type: string
      required:
        - id
        - name
        - type
      type: object
    EnvironmentBaseResponse:
      properties:
        id:
          description: The ID the Environment is referenced as.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The Human-friendly name for the Environment.
          type: string
        namespace:
          description: The Environment namespace.
          type: string
        type:
          description:
            The Environment Type. This is used for organizing and managing
            Environments.
          type: string
      required:
        - id
        - name
        - type
      type: object
    EnvironmentDefinitionRequest:
      properties:
        from_deploy_id:
          description:
            Defines the existing Deployment the new Environment will be
            based on.
          type: string
        id:
          description: The ID the Environment is referenced as.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The Human-friendly name for the Environment.
          type: string
        namespace:
          description: The Environment namespace.
          type: string
        type:
          description:
            The Environment Type. This is used for organizing and managing
            Environments.
          type: string
      required:
        - id
        - name
        - type
        - from_deploy_id
      type: object
    EnvironmentDefinitionResponse:
      properties:
        id:
          description: The ID the Environment is referenced as.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The Human-friendly name for the Environment.
          type: string
        namespace:
          description: The Environment namespace.
          type: string
        type:
          description:
            The Environment Type. This is used for organizing and managing
            Environments.
          type: string
      required:
        - id
        - name
        - type
        - from_deploy_id
      type: object
    EnvironmentRequest:
      description:
        Environments are independent spaces where Applications can run.
        An Application is always deployed into an Environment.
      example:
        created_at: "2020-05-22T14:58:07Z"
        created_by: a.user@example.com
        from_deploy:
          comment: Updated version of module-one to v0.3.1
          created_at: "2020-05-22T14:58:07Z"
          created_by: a.user@example.com
          delta_id: df1ad41807b0390a9b0eaf8688e1f5baece9d764
          env_id: my-env
          from_id: 42d4b302fd3c
          id: 67f1619a57d
          status: in progress
          status_changed_at: "2020-05-22T14:59:01Z"
        id: feature-test
        last_deploy:
          comment: Updated version of module-one to v0.3.1
          created_at: "2020-05-22T14:58:07Z"
          created_by: a.user@example.com
          delta_id: df1ad41807b0390a9b0eaf8688e1f5baece9d764
          env_id: my-env
          from_id: 42d4b302fd3c
          id: 67f1619a57d
          status: in progress
          status_changed_at: "2020-05-22T14:59:01Z"
        name: Feature Test
        type: development
      properties:
        id:
          description: The ID the Environment is referenced as.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The Human-friendly name for the Environment.
          type: string
        namespace:
          type: string
        type:
          description:
            The Environment Type. This is used for organizing and managing
            Environments.
          type: string
      required:
        - id
        - name
        - type
      type: object
    EnvironmentResponse:
      description:
        Environments are independent spaces where Applications can run.
        An Application is always deployed into an Environment.
      example:
        created_at: "2020-05-22T14:58:07Z"
        created_by: a.user@example.com
        from_deploy:
          comment: Updated version of module-one to v0.3.1
          created_at: "2020-05-22T14:58:07Z"
          created_by: a.user@example.com
          delta_id: df1ad41807b0390a9b0eaf8688e1f5baece9d764
          env_id: my-env
          from_id: 42d4b302fd3c
          id: 67f1619a57d
          status: in progress
          status_changed_at: "2020-05-22T14:59:01Z"
        id: feature-test
        last_deploy:
          comment: Updated version of module-one to v0.3.1
          created_at: "2020-05-22T14:58:07Z"
          created_by: a.user@example.com
          delta_id: df1ad41807b0390a9b0eaf8688e1f5baece9d764
          env_id: my-env
          from_id: 42d4b302fd3c
          id: 67f1619a57d
          status: in progress
          status_changed_at: "2020-05-22T14:59:01Z"
        name: Feature Test
        type: development
      properties:
        created_at:
          description: The timestamp in UTC of when the Environment was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created the Environment
          type: string
        from_deploy:
          "$ref": "#/components/schemas/DeploymentResponse"
          description: |-
            The Deployment which acts as the base for the next Deployment. Typically this will be identical to last_deploy but can differ if an Environment Rebase occurred.

            This property is not present before the first Deployment in the first Environment in a new Application.
        id:
          description: The ID the Environment is referenced as.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        last_deploy:
          "$ref": "#/components/schemas/DeploymentResponse"
          description:
            The last Deployment to have occured in the environment. This
            is not present if a deployment is yet to occur in the Environment.
        name:
          description: The Human-friendly name for the Environment.
          type: string
        namespace:
          type: string
        type:
          description:
            The Environment Type. This is used for organizing and managing
            Environments.
          type: string
      required:
        - id
        - name
        - type
      type: object
    EnvironmentTypeRequest:
      description: |-
        Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.

        Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
      example:
        description: Environments used for automated QA.
        id: qa-automation
      properties:
        description:
          description: A Human-readable description of the Environment Type
          type: string
        id:
          description: The ID of the Environment Type. (Must be unique within an Organization.)
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
      required:
        - id
      type: object
    EnvironmentTypeResponse:
      description: |-
        Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.

        Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
      example:
        description: Environments used for automated QA.
        id: qa-automation
      properties:
        description:
          description: A Human-readable description of the Environment Type
          type: string
        id:
          description: The ID of the Environment Type. (Must be unique within an Organization.)
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
      required:
        - id
      type: object
    ExportFileRequest:
      description:
        ExportFile is export file URL and metadata, it's  what export endpoint
        returns
      properties:
        created:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        name:
          type: string
        size:
          type: string
        url:
          type: string
      type: object
    ExportFileResponse:
      description:
        ExportFile is export file URL and metadata, it's  what export endpoint
        returns
      properties:
        created:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        name:
          type: string
        size:
          type: string
        url:
          type: string
      type: object
    ObjectUserRoleRequest:
      description:
        ObjectUserRole holds the mapping of a Role that a User holds for
        a particular Object.
      example:
        object: "/orgs/my-org"
        role: manager
        user: 61048226-642c-438e-974f-ce5c013d94f8
      properties:
        object:
          description: The Object the the User holds the Role on
          type: string
        role:
          description: The Role that this User holds on the Object
          type: string
        user:
          description: The User ID that hold the Role on the Object
          type: string
      type: object
    ObjectUserRoleResponse:
      description:
        ObjectUserRole holds the mapping of a Role that a User holds for
        a particular Object.
      example:
        object: "/orgs/my-org"
        role: manager
        user: 61048226-642c-438e-974f-ce5c013d94f8
      properties:
        object:
          description: The Object the the User holds the Role on
          type: string
        role:
          description: The Role that this User holds on the Object
          type: string
        user:
          description: The User ID that hold the Role on the Object
          type: string
      type: object
    ObjectRoleRequest:
      description:
        ObjectRole holds the mapping of a Role that a User holds for a
        particular Object.
      example:
        object: "/orgs/my-org"
        role: manager
      properties:
        object:
          description: The Object the the User holds the Role on
          type: string
        role:
          description: The Role that this User holds on the Object
          type: string
      type: object
    ObjectRoleResponse:
      description:
        ObjectRole holds the mapping of a Role that a User holds for a
        particular Object.
      example:
        object: "/orgs/my-org"
        role: manager
      properties:
        object:
          description: The Object the the User holds the Role on
          type: string
        role:
          description: The Role that this User holds on the Object
          type: string
      type: object
    UserRoleRequest:
      description: UserRole holds the mapping of role to user for a particular object.
      example:
        role: manager
        user: 61048226-642c-438e-974f-ce5c013d94f8
        email: jo.trigg@awesomecorp.com
        id: 730c1f96-8ee5-4bff-8c22-898e0530b924
        invite: accepted
        name: Jo Trigg
      properties:
        role:
          description: The role that this user holds
          type: string
        user:
          description: The user ID that hold the role
          type: string
        created_at:
          description: The time the user was first registered with Humanitec
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        email:
          description: The email address of the user from the profile
          type: string
        id:
          description: The User ID for this user
          type: string
        invite:
          description: The status of an invitation (If applicable)
          type: string
        name:
          description: The name the user goes by
          type: string
      type: object
    UserRoleResponse:
      description: UserRole holds the mapping of role to user for a particular object.
      example:
        role: manager
        user: 61048226-642c-438e-974f-ce5c013d94f8
        email: jo.trigg@awesomecorp.com
        id: 730c1f96-8ee5-4bff-8c22-898e0530b924
        invite: accepted
        name: Jo Trigg
      properties:
        role:
          description: The role that this user holds
          type: string
        user:
          description: The user ID that hold the role
          type: string
        created_at:
          description: The time the user was first registered with Humanitec
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        email:
          description: The email address of the user from the profile
          type: string
        id:
          description: The User ID for this user
          type: string
        invite:
          description: The status of an invitation (If applicable)
          type: string
        name:
          description: The name the user goes by
          type: string
      type: object
    AutomationRuleRequest:
      description:
        An Automation Rule defining how and when images in an environment
        should be updated.
      example:
        active: true
        created_at: "2021-07-22T14:53:27Z"
        created_by: 0dbbdc88-b125-47f1-9a96-6c4c9d6ddc70
        exclude_images_filter: false
        id: 923486d012f20324
        images_filter:
          - sample-service
        match: "^pr-[0-9]+-.*$"
        type: update
        update_to: branch
      properties:
        active:
          description: Whether the rule will be processed or not.
          type: boolean
        exclude_images_filter:
          description:
            Whether `images_filter` represents images to include or images
            to exclude.
          type: boolean
        images_filter:
          description:
            A list of image IDs to be processed by the rule. If the array
            is empty, it implies include all. If `exclude_images_filter` is true,
            this list describes images to exclude.
          items:
            type: string
          type: array
        match:
          description:
            A regular expression to be applied to the branch or tag name
            depending on the value of `update_to`. If omitted or empty, defaults to
            match all.
          type: string
        type:
          description:
            Specifies the type of event. Currently, only updates to either
            branches or tags are supported. Must be `"update"`.
          pattern: "^(?:update)$"
          type: string
        update_to:
          description:
            Specifies whether the update occurs on commit to branch or
            creation of tag. Must be one of `"branch"` or `"tag"`.
          pattern: "^(?:branch|tag)$"
          type: string
      required:
        - type
        - images_filter
        - update_to
      type: object
    AutomationRuleResponse:
      description:
        An Automation Rule defining how and when images in an environment
        should be updated.
      example:
        active: true
        created_at: "2021-07-22T14:53:27Z"
        created_by: 0dbbdc88-b125-47f1-9a96-6c4c9d6ddc70
        exclude_images_filter: false
        id: 923486d012f20324
        images_filter:
          - sample-service
        match: "^pr-[0-9]+-.*$"
        type: update
        update_to: branch
      properties:
        active:
          description: Whether the rule will be processed or not.
          type: boolean
        created_at:
          description: The user who created the Automation Rule.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        exclude_images_filter:
          description:
            Whether `images_filter` represents images to include or images
            to exclude.
          type: boolean
        id:
          description: The unique ID for this rule.
          type: string
        images_filter:
          description:
            A list of image IDs to be processed by the rule. If the array
            is empty, it implies include all. If `exclude_images_filter` is true,
            this list describes images to exclude.
          items:
            type: string
          type: array
        match:
          description:
            A regular expression to be applied to the branch or tag name
            depending on the value of `update_to`. If omitted or empty, defaults to
            match all.
          type: string
        type:
          description:
            Specifies the type of event. Currently, only updates to either
            branches or tags are supported. Must be `"update"`.
          pattern: "^(?:update)$"
          type: string
        update_to:
          description:
            Specifies whether the update occurs on commit to branch or
            creation of tag. Must be one of `"branch"` or `"tag"`.
          pattern: "^(?:branch|tag)$"
          type: string
        updated_at:
          description: The last time the rule was updated.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
      required:
        - type
        - images_filter
        - update_to
      type: object
    ErrorInfoRequest:
      description: ErrorInfo is returned by a handler in case of an error.
      properties:
        error:
          description: An error details
          type: string
      type: object
    ErrorInfoResponse:
      description: ErrorInfo is returned by a handler in case of an error.
      properties:
        error:
          description: An error details
          type: string
      type: object
    DeltaMetadataRequest:
      properties:
        archived:
          type: boolean
        contributers:
          items:
            type: string
          type: array
        created_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          type: string
        env_id:
          type: string
        last_modified_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        name:
          type: string
        shared:
          type: boolean
      type: object
    DeltaMetadataResponse:
      properties:
        archived:
          type: boolean
        contributers:
          items:
            type: string
          type: array
        created_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          type: string
        env_id:
          type: string
        last_modified_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        name:
          type: string
        shared:
          type: boolean
      type: object
    DeltaRequest:
      description: |-
        A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.

        Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.

        **Basic Structure**

        ```
         {
           "id": <ID of the Deployment Delta.>,
           "metadata": {
             <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
           }
           "modules" : {
             "add" : {
               <ID of Module to add to the Deployment Set> : {
                 <An entire Modules object>
               }
             },
             "remove": [
               <An array of Module IDs that should be removed from the Deployment Set>
             ],
            "update": {
               <ID of Module already in the Set to be updated> : [
                 <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
               ]
             }
           }
         }
        ```
      example:
        id: 49393b5004d072000b8abfd910c61685eb9235f5
        metadata: {}
        modules:
          add:
            redis-cache:
              profile: humanitec/redis
          remove:
            - simple-service
          update:
            module-one:
              - op: replace
                path: "/spec/containers/core-service/variables/EXAMPLE"
                value: New Value
      properties:
        metadata:
          "$ref": "#/components/schemas/DeltaMetadataRequest"
          description:
            Holds various metadata such as a Human-friendly name, collaborators,
            and Environment it is associated with.
        modules:
          "$ref": "#/components/schemas/ModuleDeltasRequest"
          description: A dictionary of the Modules this Delta has operations for.
        shared:
          items:
            "$ref": "#/components/schemas/UpdateActionRequest"
          type: array
      type: object
    DeltaResponse:
      description: |-
        A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.

        Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.

        **Basic Structure**

        ```
         {
           "id": <ID of the Deployment Delta.>,
           "metadata": {
             <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
           }
           "modules" : {
             "add" : {
               <ID of Module to add to the Deployment Set> : {
                 <An entire Modules object>
               }
             },
             "remove": [
               <An array of Module IDs that should be removed from the Deployment Set>
             ],
            "update": {
               <ID of Module already in the Set to be updated> : [
                 <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
               ]
             }
           }
         }
        ```
      example:
        id: 49393b5004d072000b8abfd910c61685eb9235f5
        metadata: {}
        modules:
          add:
            redis-cache:
              profile: humanitec/redis
          remove:
            - simple-service
          update:
            module-one:
              - op: replace
                path: "/spec/containers/core-service/variables/EXAMPLE"
                value: New Value
      properties:
        id:
          description: A unique ID for the Delta
          type: string
        metadata:
          "$ref": "#/components/schemas/DeltaMetadataResponse"
          description:
            Holds various metadata such as a Human-friendly name, collaborators,
            and Environment it is associated with.
        modules:
          "$ref": "#/components/schemas/ModuleDeltasResponse"
          description: A dictionary of the Modules this Delta has operations for.
        shared:
          items:
            "$ref": "#/components/schemas/UpdateActionResponse"
          type: array
      type: object
    ModuleDeltasRequest:
      description: ModuleDeltas groups the different operations together.
      properties:
        add:
          additionalProperties:
            additionalProperties:
              type: object
            type: object
          type: object
        remove:
          items:
            type: string
          type: array
        update:
          additionalProperties:
            items:
              "$ref": "#/components/schemas/UpdateActionRequest"
            type: array
          type: object
      type: object
    ModuleDeltasResponse:
      description: ModuleDeltas groups the different operations together.
      properties:
        add:
          additionalProperties:
            additionalProperties:
              type: object
            type: object
          type: object
        remove:
          items:
            type: string
          type: array
        update:
          additionalProperties:
            items:
              "$ref": "#/components/schemas/UpdateActionResponse"
            type: array
          type: object
      type: object
    SetRequest:
      description: |-
        A Deployment Set (or just "Set") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.

        Deployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.

        Deployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.

        **Basic Structure**

        ```
         {
           "id": <ID of the Deployment Set>,
           "modules" : {
             <ID of Module> : {
               "profile": <Defines how the optional "spec" property is interpreted>
               "spec": {
                 <Properties that depend on the "profile" property.>
               }
               "externals": {
                 <External Resource Name> : {
                   "type": <Resource Type>,
                   "params": {
                     <Properties which parametrize the resource depending on the Resource Type.>
                   }
                 }
               }
             }
           }
         }
        ```

        For details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].
      example:
        modules:
          module-one:
            externals:
              db-one:
                params:
                  extensions:
                    uuid-ossp: {}
                type: postgres
            profile: humanitec/default-module
            spec:
              containers:
                core-service:
                  id: core-service
                  image: registry.humanitec.io/my-org/core-service:VERSION_ONE
                  readiness_probe:
                    path: "/healtz"
                    port: 8080
                    type: http
                  variables:
                    DBHOST: "${externals.db-one.name}"
                    DBNAME: "${externals.db-one.name}"
                    DBPASSWORD: "${externals.db-one.password}"
                    DBUSERNAME: "${externals.db-one.username}"
                    REDIS_URL: redis://${modules.redis-cache.service.name}
          redis-cache:
            profile: humanitec/redis
      properties:
        modules:
          additionalProperties:
            additionalProperties:
              type: object
            type: object
          description: The Modules that make up the Set
          type: object
        shared:
          additionalProperties:
            type: object
          description: Resources that are shared across the set
          type: object
        version:
          description:
            The version of the Deployment Set Schema to use. (Currently,
            only 0 is supported, and if omitted, version 0 is assumed.)
          type: integer
      type: object
    SetResponse:
      description: |-
        A Deployment Set (or just "Set") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.

        Deployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.

        Deployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.

        **Basic Structure**

        ```
         {
           "id": <ID of the Deployment Set>,
           "modules" : {
             <ID of Module> : {
               "profile": <Defines how the optional "spec" property is interpreted>
               "spec": {
                 <Properties that depend on the "profile" property.>
               }
               "externals": {
                 <External Resource Name> : {
                   "type": <Resource Type>,
                   "params": {
                     <Properties which parametrize the resource depending on the Resource Type.>
                   }
                 }
               }
             }
           }
         }
        ```

        For details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].
      example:
        modules:
          module-one:
            externals:
              db-one:
                params:
                  extensions:
                    uuid-ossp: {}
                type: postgres
            profile: humanitec/default-module
            spec:
              containers:
                core-service:
                  id: core-service
                  image: registry.humanitec.io/my-org/core-service:VERSION_ONE
                  readiness_probe:
                    path: "/healtz"
                    port: 8080
                    type: http
                  variables:
                    DBHOST: "${externals.db-one.name}"
                    DBNAME: "${externals.db-one.name}"
                    DBPASSWORD: "${externals.db-one.password}"
                    DBUSERNAME: "${externals.db-one.username}"
                    REDIS_URL: redis://${modules.redis-cache.service.name}
          redis-cache:
            profile: humanitec/redis
      properties:
        id:
          description: The ID which is a hash of the content of the Deployment Set.
          type: string
        modules:
          additionalProperties:
            additionalProperties:
              type: object
            type: object
          description: The Modules that make up the Set
          type: object
        shared:
          additionalProperties:
            type: object
          description: Resources that are shared across the set
          type: object
        version:
          description:
            The version of the Deployment Set Schema to use. (Currently,
            only 0 is supported, and if omitted, version 0 is assumed.)
          type: integer
      type: object
    UpdateActionRequest:
      description: |-
        A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:

        * Only `add`, `remove` and `replace` are supported

        * `remove` can have have its scope of application applied in its `value`. e.g. `{"scope":"delta"}
      properties:
        from:
          type: string
        op:
          type: string
        path:
          type: string
        value:
          type: object
      type: object
    UpdateActionResponse:
      description: |-
        A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:

        * Only `add`, `remove` and `replace` are supported

        * `remove` can have have its scope of application applied in its `value`. e.g. `{"scope":"delta"}
      properties:
        from:
          type: string
        op:
          type: string
        path:
          type: string
        value:
          type: object
      type: object
    EventBaseRequest:
      description: Properties which identify an event .
      properties:
        scope:
          description: Event scope
          type: string
        type:
          description: Event type
          type: string
      type: object
    EventBaseResponse:
      description: Properties which identify an event .
      properties:
        scope:
          description: Event scope
          type: string
        type:
          description: Event type
          type: string
      type: object
    EventRequest:
      description: Events available for triggering automated jobs.
      properties:
        properties:
          description:
            List of event properties which can be used as variables for
            this event
          items:
            type: string
          type: array
        scope:
          description: Event scope
          type: string
        type:
          description: Event type
          type: string
      type: object
    EventResponse:
      description: Events available for triggering automated jobs.
      properties:
        properties:
          description:
            List of event properties which can be used as variables for
            this event
          items:
            type: string
          type: array
        scope:
          description: Event scope
          type: string
        type:
          description: Event type
          type: string
      type: object
    JSONFieldRequest:
      additionalProperties:
        type: object
      type: object
    JSONFieldResponse:
      additionalProperties:
        type: object
      type: object
    WebhookRequest:
      description:
        Webhook is a special type of a Job, it performs a HTTPS request
        to a specified URL with specified headers.
      properties:
        disabled:
          description: Defines whether this job is currently disabled.
          type: boolean
        headers:
          "$ref": "#/components/schemas/JSONFieldRequest"
          description: Thw webhook's HTTP headers
        id:
          description: Job ID, unique within the Organization
          type: string
        payload:
          "$ref": "#/components/schemas/JSONFieldRequest"
          description: Thw webhook's HTTP headers
        triggers:
          description: A list of Events by which the Job is triggered
          items:
            "$ref": "#/components/schemas/EventBaseRequest"
          type: array
        url:
          description: Thw webhook's URL (without protocol, only HTTPS is supported)
          type: string
      type: object
    WebhookResponse:
      description:
        Webhook is a special type of a Job, it performs a HTTPS request
        to a specified URL with specified headers.
      properties:
        created_at:
          description: The timestamp of when this Job was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created this Job
          type: string
        disabled:
          description: Defines whether this job is currently disabled.
          type: boolean
        headers:
          "$ref": "#/components/schemas/JSONFieldResponse"
          description: Thw webhook's HTTP headers
        id:
          description: Job ID, unique within the Organization
          type: string
        payload:
          "$ref": "#/components/schemas/JSONFieldResponse"
          description: Thw webhook's HTTP headers
        triggers:
          description: A list of Events by which the Job is triggered
          items:
            "$ref": "#/components/schemas/EventBaseResponse"
          type: array
        url:
          description: Thw webhook's URL (without protocol, only HTTPS is supported)
          type: string
      type: object
    ImageBuildRequest:
      description: Holds the metadata asociated withe a Container Image Build
      properties:
        branch:
          description: The branch name of the branch the build was built on
          type: string
        commit:
          description: The commit ID that this build was built from.
          type: string
        image:
          description:
            The fully qualified Image URL including registry, repository
            and tag.
          type: string
        tags:
          description: The tag that the build was built from.
          items:
            type: string
          type: array
      type: object
    ImageBuildResponse:
      description: Holds the metadata asociated withe a Container Image Build
      properties:
        added_at:
          description: The time when the build was added to Humanitec.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        branch:
          description: The branch name of the branch the build was built on
          type: string
        commit:
          description: The commit ID that this build was built from.
          type: string
        image:
          description:
            The fully qualified Image URL including registry, repository
            and tag.
          type: string
        tags:
          description: The tag that the build was built from.
          items:
            type: string
          type: array
      type: object
    ImageRequest:
      description:
        Container Images (known simply as Images) can be registered with
        Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec
        when a new build of a Container Image becomes available. Humanitec tracks
        the Image along with metadata about how it was built.
      example:
        added_at: 22020-06-25T17:41:57Z
        builds:
          - added_at: "2020-06-25T19:37:22Z"
            branch: master
            commit: 884bccaa807ea27cc1997a7492a3b6279fd7bd55
            image: registry.humanitec.io/my-org/my-service:1.2.7
          - added_at: "2020-06-25T17:41:57Z"
            branch: master
            commit: 060c3d6530a881afb808f105f36af25e1ad1b2f3
            image: registry.humanitec.io/my-org/my-service:1.2.6
        id: my-service
        source: github
      properties:
        added_at:
          description: The time the first build of this Image was added to the Organization
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        builds:
          description: A list of Image Builds ordered by addition date.
          items:
            "$ref": "#/components/schemas/ImageBuildRequest"
          type: array
        id:
          description: The ID used to group different builds of the same Image together.
          type: string
        source:
          description: The Image Source that this Image is added via
          type: string
      type: object
    ImageResponse:
      description:
        Container Images (known simply as Images) can be registered with
        Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec
        when a new build of a Container Image becomes available. Humanitec tracks
        the Image along with metadata about how it was built.
      example:
        added_at: 22020-06-25T17:41:57Z
        builds:
          - added_at: "2020-06-25T19:37:22Z"
            branch: master
            commit: 884bccaa807ea27cc1997a7492a3b6279fd7bd55
            image: registry.humanitec.io/my-org/my-service:1.2.7
          - added_at: "2020-06-25T17:41:57Z"
            branch: master
            commit: 060c3d6530a881afb808f105f36af25e1ad1b2f3
            image: registry.humanitec.io/my-org/my-service:1.2.6
        id: my-service
        source: github
      properties:
        added_at:
          description: The time the first build of this Image was added to the Organization
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        builds:
          description: A list of Image Builds ordered by addition date.
          items:
            "$ref": "#/components/schemas/ImageBuildResponse"
          type: array
        id:
          description: The ID used to group different builds of the same Image together.
          type: string
        source:
          description: The Image Source that this Image is added via
          type: string
      type: object
    ImageSourceRequest:
      description: |-
        An Image Source is a way to organize how Images are registered through the platform. Each Image Source has an associated token which can be used to authenticate notification requests.

        It is recommended that each separate system that notifies Humanitec of new Image Builds should have its own Image Source. This provides both security and management benefits. From the security perspective, if the token is compromised, only one system needs to be updated to update the token to a new one. From a management perspective, it can be useful to get an overview of where Image builds come from.
      example:
        created_at: "2020-06-25T09:32:03Z"
        created_by: a-user@example.com
        id: corporate-org-github
        name: Github for Corporate Organization
        token: 7c52ef0c2f22cb5139f912410507f68f0c2b47bc
        type: github
      properties:
        id:
          description: The ID for the Image Source.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: A Human-friendly name for the Image Source
          type: string
        type:
          description: The type of integration.
          type: string
      required:
        - id
      type: object
    ImageSourceResponse:
      description: |-
        An Image Source is a way to organize how Images are registered through the platform. Each Image Source has an associated token which can be used to authenticate notification requests.

        It is recommended that each separate system that notifies Humanitec of new Image Builds should have its own Image Source. This provides both security and management benefits. From the security perspective, if the token is compromised, only one system needs to be updated to update the token to a new one. From a management perspective, it can be useful to get an overview of where Image builds come from.
      example:
        created_at: "2020-06-25T09:32:03Z"
        created_by: a-user@example.com
        id: corporate-org-github
        name: Github for Corporate Organization
        token: 7c52ef0c2f22cb5139f912410507f68f0c2b47bc
        type: github
      properties:
        created_at:
          description: The time the Image Source was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created the Image Source.
          type: string
        id:
          description: The ID for the Image Source.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: A Human-friendly name for the Image Source
          type: string
        token:
          description:
            The Bearer Token generated for the Image Source. The token
            can be used to add new Image builds.
          type: string
        type:
          description: The type of integration.
          type: string
      required:
        - id
      type: object
    CreateOrganizationRequestRequest:
      properties:
        id:
          description: Unique ID for the Organization.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: Human friendly name for the Organization.
          type: string
      required:
        - id
        - name
      type: object
    CreateOrganizationRequestResponse:
      properties:
        id:
          description: Unique ID for the Organization.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: Human friendly name for the Organization.
          type: string
      required:
        - id
        - name
      type: object
    OrganizationRequest:
      description:
        An Organization is the top level object in Humanitec. All other
        objects belong to an Organization.
      properties:
        id:
          description: Unique ID for the Organization.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: Human friendly name for the Organization.
          type: string
      type: object
    OrganizationResponse:
      description:
        An Organization is the top level object in Humanitec. All other
        objects belong to an Organization.
      properties:
        created_at:
          description: Timestamp when the Organization was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: User ID that created the Organization.
          type: string
        id:
          description: Unique ID for the Organization.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: Human friendly name for the Organization.
          type: string
      type: object
    AccountCredsRequest:
      description:
        AccountCreds represents an account credentials (either, username-
        or token-based).
      example:
        expires: "2020-05-22T14:53:27Z"
        password: ""
        username: ""
      properties:
        expires:
          description: Account credentials expiration timestamp.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        password:
          description: Account password or token secret.
          type: string
        username:
          description: Security account login or token.
          type: string
      required:
        - username
        - password
      type: object
    AccountCredsResponse:
      description:
        AccountCreds represents an account credentials (either, username-
        or token-based).
      example:
        expires: "2020-05-22T14:53:27Z"
        password: ""
        username: ""
      properties:
        expires:
          description: Account credentials expiration timestamp.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        password:
          description: Account password or token secret.
          type: string
        username:
          description: Security account login or token.
          type: string
      required:
        - username
        - password
      type: object
    ClusterSecretRequest:
      description: ClusterSecret represents Kubernetes secret reference.
      example:
        namespace: dev-secrets
        secret: custom-regcred
      properties:
        namespace:
          description: Namespace to look for the Kubernetes secret definition in.
          type: string
        secret:
          description: Name that identifies the Kubernetes secret.
          type: string
      required:
        - namespace
        - secret
      type: object
    ClusterSecretResponse:
      description: ClusterSecret represents Kubernetes secret reference.
      example:
        namespace: dev-secrets
        secret: custom-regcred
      properties:
        namespace:
          description: Namespace to look for the Kubernetes secret definition in.
          type: string
        secret:
          description: Name that identifies the Kubernetes secret.
          type: string
      required:
        - namespace
        - secret
      type: object
    ClusterSecretsMapRequest:
      additionalProperties:
        "$ref": "#/components/schemas/ClusterSecretRequest"
      description:
        ClusterSecretsMap stores a list of Kuberenetes secret references
        for the target deployment clusters.
      example:
        "*":
          namespace: dev-secrets
          secret: custom-regcred
        cluster-A:
          namespace: prod-secrets
          secret: custom-regcred
      type: object
    ClusterSecretsMapResponse:
      additionalProperties:
        "$ref": "#/components/schemas/ClusterSecretResponse"
      description:
        ClusterSecretsMap stores a list of Kuberenetes secret references
        for the target deployment clusters.
      example:
        "*":
          namespace: dev-secrets
          secret: custom-regcred
        cluster-A:
          namespace: prod-secrets
          secret: custom-regcred
      type: object
    ImagesRegistryCredsRequest:
      description:
        ImagesRegistryCreds stores registry credentials details alongside
        with associated images.
      properties:
        images:
          description: List of images associated with the registry.
          items:
            type: string
          type: array
        registry:
          description:
            Registry name, usually in a "{domain}" or "{domain}/{project}"
            format.
          type: string
        secrets:
          "$ref": "#/components/schemas/ClusterSecretsMapRequest"
          description:
            A list of Kuberenetes secret references for the target deployment
            clusters.
      required:
        - registry
        - images
      type: object
    ImagesRegistryCredsResponse:
      description:
        ImagesRegistryCreds stores registry credentials details alongside
        with associated images.
      properties:
        images:
          description: List of images associated with the registry.
          items:
            type: string
          type: array
        registry:
          description:
            Registry name, usually in a "{domain}" or "{domain}/{project}"
            format.
          type: string
        secrets:
          "$ref": "#/components/schemas/ClusterSecretsMapResponse"
          description:
            A list of Kuberenetes secret references for the target deployment
            clusters.
      required:
        - registry
        - images
      type: object
    RegistriesCredsRequestRequest:
      description: Registries credentials look-up request.
      example:
        - registry.humanitec.io/public/sample-app:1.3.0
        - registry.humanitec.io/public/sample-service:1.3.0
        - gcr.io/sample-project/sample-proxy:1.0.0
      type: string
    RegistriesCredsRequestResponse:
      description: Registries credentials look-up request.
      example:
        - registry.humanitec.io/public/sample-app:1.3.0
        - registry.humanitec.io/public/sample-service:1.3.0
        - gcr.io/sample-project/sample-proxy:1.0.0
      type: string
    RegistriesCredsResponseRequest:
      additionalProperties:
        "$ref": "#/components/schemas/ImagesRegistryCredsRequest"
      description: Registries credentials look-up response.
      example:
        gcr:
          images:
            - gcr.io/sample-project/sample-proxy:1.0.0
          registry: gcr-io/sample-project
          secrets:
            "*":
              namespace: gcr-secrets
              secret: gcr-regcred
        humanitec:
          images:
            - registry.humanitec.io/public/sample-app:1.3.0
            - registry.humanitec.io/public/sample-service:1.3.0
          password: S54f$lgO-45
          registry: registry.humanitec.io
          username: test-org.harbor@humanitec.com
      type: object
    RegistriesCredsResponseResponse:
      additionalProperties:
        "$ref": "#/components/schemas/ImagesRegistryCredsResponse"
      description: Registries credentials look-up response.
      example:
        gcr:
          images:
            - gcr.io/sample-project/sample-proxy:1.0.0
          registry: gcr-io/sample-project
          secrets:
            "*":
              namespace: gcr-secrets
              secret: gcr-regcred
        humanitec:
          images:
            - registry.humanitec.io/public/sample-app:1.3.0
            - registry.humanitec.io/public/sample-service:1.3.0
          password: S54f$lgO-45
          registry: registry.humanitec.io
          username: test-org.harbor@humanitec.com
      type: object
    RegistryCredsRequest:
      description:
        RegistryCreds represents current registry credentials (either,
        username- or token-based).
      example:
        expires: "2020-05-22T14:53:27Z"
        password: ""
        registry: registry.io/project
        secrets:
          "*":
            namespace: dev-secrets
            secret: custom-regcred
          cluster-A:
            namespace: prod-secrets
            secret: custom-regcred
        username: ""
      properties:
        registry:
          description:
            Registry name, usually in a "{domain}" or "{domain}/{project}"
            format.
          type: string
        secrets:
          "$ref": "#/components/schemas/ClusterSecretsMapRequest"
          description:
            A list of Kuberenetes secret references for the target deployment
            clusters.
      required:
        - registry
        - secrets
      type: object
    RegistryCredsResponse:
      description:
        RegistryCreds represents current registry credentials (either,
        username- or token-based).
      example:
        expires: "2020-05-22T14:53:27Z"
        password: ""
        registry: registry.io/project
        secrets:
          "*":
            namespace: dev-secrets
            secret: custom-regcred
          cluster-A:
            namespace: prod-secrets
            secret: custom-regcred
        username: ""
      properties:
        registry:
          description:
            Registry name, usually in a "{domain}" or "{domain}/{project}"
            format.
          type: string
        secrets:
          "$ref": "#/components/schemas/ClusterSecretsMapResponse"
          description:
            A list of Kuberenetes secret references for the target deployment
            clusters.
      required:
        - registry
        - secrets
      type: object
    RegistryRequest:
      description: |-
        Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.

        Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
      example:
        created_at: "2020-05-22T14:53:27Z"
        created_by: a.user@example.com
        enable_ci: false
        id: humanitec
        registry: registry.humanitec.io
        secrets:
          "*":
            namespace: dev-secrets
            secret: custom-regcred
          cluster-A:
            namespace: prod-secrets
            secret: custom-regcred
        type: basic
      properties:
        creds:
          "$ref": "#/components/schemas/AccountCredsRequest"
          description: Registry security account credentials.
        enable_ci:
          description:
            Indicates if registry secrets and credentials should be exposed
            to CI agents.
          type: boolean
        id:
          description: Registry ID, unique within the Organization.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        registry:
          description:
            Registry name, usually in a "{domain}" or "{domain}/{project}"
            format.
          type: string
        secrets:
          "$ref": "#/components/schemas/ClusterSecretsMapRequest"
          description:
            Secrets stores references to the Kubernetes secret objects
            to be copied to the target clusters, identified by the map key.
        type:
          description: |-
            Registry type, describes the registry authentication method, and defines the schema for the credentials.

            Supported values:

            - `public`

            - `basic`

            - `google_gcr`

            - `amazon_ecr`

            - `secret_ref`
          type: string
      required:
        - id
        - registry
        - type
      type: object
    RegistryResponse:
      description: |-
        Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.

        Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
      example:
        created_at: "2020-05-22T14:53:27Z"
        created_by: a.user@example.com
        enable_ci: false
        id: humanitec
        registry: registry.humanitec.io
        secrets:
          "*":
            namespace: dev-secrets
            secret: custom-regcred
          cluster-A:
            namespace: prod-secrets
            secret: custom-regcred
        type: basic
      properties:
        created_at:
          description: The timestamp of when this record was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created this record.
          type: string
        enable_ci:
          description:
            Indicates if registry secrets and credentials should be exposed
            to CI agents.
          type: boolean
        id:
          description: Registry ID, unique within the Organization.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        registry:
          description:
            Registry name, usually in a "{domain}" or "{domain}/{project}"
            format.
          type: string
        secrets:
          "$ref": "#/components/schemas/ClusterSecretsMapResponse"
          description:
            Secrets stores references to the Kubernetes secret objects
            to be copied to the target clusters, identified by the map key.
        type:
          description: |-
            Registry type, describes the registry authentication method, and defines the schema for the credentials.

            Supported values:

            - `public`

            - `basic`

            - `google_gcr`

            - `amazon_ecr`

            - `secret_ref`
          type: string
      required:
        - id
        - registry
        - type
      type: object
    AccountTypeRequest:
      description:
        Resource Account Types define cloud providers or protocols to which
        a resource account can belong.
      example:
        name: GCP
        type: gcp
      properties:
        name:
          description: Display Name.
          type: string
        type:
          description: Unique account type identifier (system-wide, across all organizations).
          type: string
      type: object
    AccountTypeResponse:
      description:
        Resource Account Types define cloud providers or protocols to which
        a resource account can belong.
      example:
        name: GCP
        type: gcp
      properties:
        name:
          description: Display Name.
          type: string
        type:
          description: Unique account type identifier (system-wide, across all organizations).
          type: string
      type: object
    ActiveResourceRequest:
      description: |-
        Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.

        Active Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.
      example:
        app_id: test-app
        def_id: gcp-dev-postgres
        env_id: gcp-dev
        env_type: development
        org_id: test-org
        outputs:
          values:
            host: 127.0.0.1
            name: db_33c7ef9b_8d90-4c62_a1cf_0cdd30fd29a9
            port: 5432
        res_id: modules.my-module.externals.my-db
        type: postgres
        updated_at: "2020-06-23T16:53:12Z"
      properties:
        app_id:
          description: The ID of the App the resource is associated with.
          type: string
        data:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: For backward compatibility only. Use `resource`
            property instead."
          type: object
        def_id:
          description:
            The Resource Definition that this resource was provisioned
            from
          type: string
        env_id:
          description: The ID of the Environment the resource is associated with.
          type: string
        env_type:
          description: The Environment Type of the Environment specified by EnvID.
          type: string
        org_id:
          description:
            the ID of the Organization the Active Resource is associated
            with.
          type: string
        res_id:
          description: The ID of the resource
          type: string
        resource:
          additionalProperties:
            type: object
          description:
            The data that the resource passes into the deployment ('values'
            only)
          type: object
        status:
          description: "Current resource status: 'pending', 'active', or 'deleting'"
          type: string
        type:
          description: The Resource Type of the resource
          type: string
        updated_at:
          description:
            This time denotes when the resource was last provisioned. (Is
            close to the last deployment time.)
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
      type: object
    ActiveResourceResponse:
      description: |-
        Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.

        Active Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.
      example:
        app_id: test-app
        def_id: gcp-dev-postgres
        env_id: gcp-dev
        env_type: development
        org_id: test-org
        outputs:
          values:
            host: 127.0.0.1
            name: db_33c7ef9b_8d90-4c62_a1cf_0cdd30fd29a9
            port: 5432
        res_id: modules.my-module.externals.my-db
        type: postgres
        updated_at: "2020-06-23T16:53:12Z"
      properties:
        app_id:
          description: The ID of the App the resource is associated with.
          type: string
        data:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: For backward compatibility only. Use `resource`
            property instead."
          type: object
        def_id:
          description:
            The Resource Definition that this resource was provisioned
            from
          type: string
        env_id:
          description: The ID of the Environment the resource is associated with.
          type: string
        env_type:
          description: The Environment Type of the Environment specified by EnvID.
          type: string
        org_id:
          description:
            the ID of the Organization the Active Resource is associated
            with.
          type: string
        res_id:
          description: The ID of the resource
          type: string
        resource:
          additionalProperties:
            type: object
          description:
            The data that the resource passes into the deployment ('values'
            only)
          type: object
        status:
          description: "Current resource status: 'pending', 'active', or 'deleting'"
          type: string
        type:
          description: The Resource Type of the resource
          type: string
        updated_at:
          description:
            This time denotes when the resource was last provisioned. (Is
            close to the last deployment time.)
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
      type: object
    AsyncProgressHintRequest:
      description: AsyncProgressHint describes ongoing asynchronous operation.
      example:
        deadline: "2021-02-22T09:02:00Z"
        estimate: "2021-02-22T09:00:10Z"
        status: pending|deleting
        timestamp: "2021-02-22T09:00:00Z"
      properties:
        deadline:
          description:
            The date and time of when the operation will be aborted if
            not yet finished.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        estimate:
          description:
            Estimated date and time of when the operation is expected to
            be completed.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        status:
          description: Current status.
          type: string
        timestamp:
          description: Current (reference) date and time.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
      type: object
    AsyncProgressHintResponse:
      description: AsyncProgressHint describes ongoing asynchronous operation.
      example:
        deadline: "2021-02-22T09:02:00Z"
        estimate: "2021-02-22T09:00:10Z"
        status: pending|deleting
        timestamp: "2021-02-22T09:00:00Z"
      properties:
        deadline:
          description:
            The date and time of when the operation will be aborted if
            not yet finished.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        estimate:
          description:
            Estimated date and time of when the operation is expected to
            be completed.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        status:
          description: Current status.
          type: string
        timestamp:
          description: Current (reference) date and time.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
      type: object
    CreateDriverRequestRequest:
      description:
        CreateDriverRequest describes the new resource driver registration
        request.
      example:
        account_types:
          - gcp
          - aws
        id: route53
        inputs_schema: {}
        is_public: false
        type: dns
        url_prefix: https://drivers.example.com/route53/
      properties:
        account_types:
          description: List of resources accounts types supported by the driver
          items:
            type: string
          type: array
        id:
          description: The ID for this driver. Is used as `driver_type`.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        inputs_schema:
          additionalProperties:
            type: object
          description: A JSON Schema specifying the driver-specific input parameters.
          type: object
        is_public:
          description: Defines whether this driver is accessible to all Organizations.
          type: boolean
        param_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the driver-specific input
            parameters. Use 'inputs_schema' instead."
          type: object
        type:
          description: The type of resource produced by this driver
          type: string
        url_prefix:
          description:
            The prefix where the driver resides. Only members of the organization
            the driver belongs to can see 'url_prefix'.
          type: string
      type: object
    CreateDriverRequestResponse:
      description:
        CreateDriverRequest describes the new resource driver registration
        request.
      example:
        account_types:
          - gcp
          - aws
        id: route53
        inputs_schema: {}
        is_public: false
        type: dns
        url_prefix: https://drivers.example.com/route53/
      properties:
        account_types:
          description: List of resources accounts types supported by the driver
          items:
            type: string
          type: array
        id:
          description: The ID for this driver. Is used as `driver_type`.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        inputs_schema:
          additionalProperties:
            type: object
          description: A JSON Schema specifying the driver-specific input parameters.
          type: object
        is_public:
          description: Defines whether this driver is accessible to all Organizations.
          type: boolean
        param_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the driver-specific input
            parameters. Use 'inputs_schema' instead."
          type: object
        type:
          description: The type of resource produced by this driver
          type: string
        url_prefix:
          description:
            The prefix where the driver resides. Only members of the organization
            the driver belongs to can see 'url_prefix'.
          type: string
      type: object
    CreateResourceAccountRequestRequest:
      description:
        CreateResourceAccountRequest describes the request to create a
        new security account.
      example:
        credentials:
          password: "***"
          username: "***"
        id: gcp-dev-postgres
        name: GCP Dev Postgres
        type: gcp-service-account
      properties:
        credentials:
          additionalProperties:
            type: object
          description: Credentials associated with the account.
          type: object
        id:
          description:
            Unique identifier for the account (in scope of the organization
            it belongs to).
          type: string
        name:
          description: Display name.
          type: string
        type:
          description: The type of the account
          type: string
      type: object
    CreateResourceAccountRequestResponse:
      description:
        CreateResourceAccountRequest describes the request to create a
        new security account.
      example:
        credentials:
          password: "***"
          username: "***"
        id: gcp-dev-postgres
        name: GCP Dev Postgres
        type: gcp-service-account
      properties:
        credentials:
          additionalProperties:
            type: object
          description: Credentials associated with the account.
          type: object
        id:
          description:
            Unique identifier for the account (in scope of the organization
            it belongs to).
          type: string
        name:
          description: Display name.
          type: string
        type:
          description: The type of the account
          type: string
      type: object
    CreateResourceDefinitionRequestRequest:
      description:
        CreateResourceDefinitionRequest describes a new ResourceDefinition
        request.
      example:
        criteria: []
        driver_account: gcp-dev-cloudsql
        driver_inputs:
          secrets:
            dbcredentials:
              password: "***"
              username: "***"
          values:
            instance: my-dev-project:my-region:dev-db
        driver_type: humanitec/cloudsql
        id: dev-postgres
        name: Dev Postgres Instance
        type: postgres
      properties:
        criteria:
          description:
            "(Optional) The criteria to use when looking for a Resource
            Definition during the deployment."
          items:
            "$ref": "#/components/schemas/MatchingCriteriaRequest"
          type: array
        driver_account:
          description: "(Optional) Security account required by the driver."
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        driver_inputs:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description: "(Optional) Additional input data to be passed to the driver."
        driver_type:
          description: The driver to be used to create the resource.
          type: string
        id:
          description: The Resource Definition ID.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The display name.
          type: string
        type:
          description: The Resource Type.
          type: string
      required:
        - id
        - name
        - type
        - driver_type
      type: object
    CreateResourceDefinitionRequestResponse:
      description:
        CreateResourceDefinitionRequest describes a new ResourceDefinition
        request.
      example:
        criteria: []
        driver_account: gcp-dev-cloudsql
        driver_inputs:
          secrets:
            dbcredentials:
              password: "***"
              username: "***"
          values:
            instance: my-dev-project:my-region:dev-db
        driver_type: humanitec/cloudsql
        id: dev-postgres
        name: Dev Postgres Instance
        type: postgres
      properties:
        criteria:
          description:
            "(Optional) The criteria to use when looking for a Resource
            Definition during the deployment."
          items:
            "$ref": "#/components/schemas/MatchingCriteriaResponse"
          type: array
        driver_account:
          description: "(Optional) Security account required by the driver."
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        driver_inputs:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description: "(Optional) Additional input data to be passed to the driver."
        driver_type:
          description: The driver to be used to create the resource.
          type: string
        id:
          description: The Resource Definition ID.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: The display name.
          type: string
        type:
          description: The Resource Type.
          type: string
      required:
        - id
        - name
        - type
        - driver_type
      type: object
    DriverDefinitionRequest:
      description: |-
        DriverDefinition describes the resource driver.

        Resource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.
      example:
        account_types:
          - gcp
          - aws
        id: route53
        inputs_schema: {}
        is_public: false
        org_id: test-org
        type: dns
        url_prefix: https://drivers.example.com/route53/
      properties:
        account_types:
          description: List of resources accounts types supported by the driver
          items:
            type: string
          type: array
        id:
          description: The ID for this driver. Is used as `driver_type`.
          type: string
        inputs_schema:
          additionalProperties:
            type: object
          description: A JSON Schema specifying the driver-specific input parameters.
          type: object
        is_public:
          description: Defines whether this driver is accessible to all Organizations.
          type: boolean
        org_id:
          description:
            The Organization this driver exists under. Useful as public
            drivers are accessible to other orgs.
          type: string
        param_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the driver-specific input
            parameters. Use 'inputs_schema' instead."
          type: object
        type:
          description: The type of resource produced by this driver
          type: string
        types:
          description:
            "DEPRECATED: Array of the resource types produced by this driver.
            Use 'type' instead."
          items:
            type: string
          type: array
        url_prefix:
          description:
            The prefix where the driver resides. Only members of the organization
            the driver belongs to can see `url_prefix`.
          type: string
      type: object
    DriverDefinitionResponse:
      description: |-
        DriverDefinition describes the resource driver.

        Resource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.
      example:
        account_types:
          - gcp
          - aws
        id: route53
        inputs_schema: {}
        is_public: false
        org_id: test-org
        type: dns
        url_prefix: https://drivers.example.com/route53/
      properties:
        account_types:
          description: List of resources accounts types supported by the driver
          items:
            type: string
          type: array
        id:
          description: The ID for this driver. Is used as `driver_type`.
          type: string
        inputs_schema:
          additionalProperties:
            type: object
          description: A JSON Schema specifying the driver-specific input parameters.
          type: object
        is_public:
          description: Defines whether this driver is accessible to all Organizations.
          type: boolean
        org_id:
          description:
            The Organization this driver exists under. Useful as public
            drivers are accessible to other orgs.
          type: string
        param_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the driver-specific input
            parameters. Use 'inputs_schema' instead."
          type: object
        type:
          description: The type of resource produced by this driver
          type: string
        types:
          description:
            "DEPRECATED: Array of the resource types produced by this driver.
            Use 'type' instead."
          items:
            type: string
          type: array
        url_prefix:
          description:
            The prefix where the driver resides. Only members of the organization
            the driver belongs to can see `url_prefix`.
          type: string
      type: object
    DriverInputsRequest:
      description:
        DriverInputs describes the resource and the input paramaters for
        the driver.
      example:
        driver:
          secrets:
            account:
              password: "<secret>"
              user: "<secret>"
            key: "<secret>"
          values:
            instance: database
        resource: {}
        type: postgres
      properties:
        driver:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description:
            The driver-specific parameters passed from the Resource Definition
            for the Environment.
        resource:
          additionalProperties:
            type: object
          description:
            The resource-related parameters passed from the deployment
            set (if any).
          type: object
        type:
          description: The type of the resource to generate.
          type: string
      type: object
    DriverInputsResponse:
      description:
        DriverInputs describes the resource and the input paramaters for
        the driver.
      example:
        driver:
          secrets:
            account:
              password: "<secret>"
              user: "<secret>"
            key: "<secret>"
          values:
            instance: database
        resource: {}
        type: postgres
      properties:
        driver:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description:
            The driver-specific parameters passed from the Resource Definition
            for the Environment.
        resource:
          additionalProperties:
            type: object
          description:
            The resource-related parameters passed from the deployment
            set (if any).
          type: object
        type:
          description: The type of the resource to generate.
          type: string
      type: object
    DriverOutputsRequest:
      description:
        DriverOutputs stores all the necessary information about the provisioned
        resource.
      example:
        id: "{guresid}"
        manifests: []
        resource:
          secrets:
            password: "<secret>"
            user: "<secret>"
          values:
            host: 127.0.0.1
            name: my-database
        type: postgres
      properties:
        id:
          description: The resource GUResID.
          type: string
        manifests:
          description: The resource definition manifests (if any).
          items:
            "$ref": "#/components/schemas/ManifestRequest"
          type: array
        resource:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description: The resource usage parameters and secrets.
        type:
          description: The type of the resource.
          type: string
      type: object
    DriverOutputsResponse:
      description:
        DriverOutputs stores all the necessary information about the provisioned
        resource.
      example:
        id: "{guresid}"
        manifests: []
        resource:
          secrets:
            password: "<secret>"
            user: "<secret>"
          values:
            host: 127.0.0.1
            name: my-database
        type: postgres
      properties:
        id:
          description: The resource GUResID.
          type: string
        manifests:
          description: The resource definition manifests (if any).
          items:
            "$ref": "#/components/schemas/ManifestResponse"
          type: array
        resource:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description: The resource usage parameters and secrets.
        type:
          description: The type of the resource.
          type: string
      type: object
    DynamicDefinitionRequest:
      description: |-
        Dynamic Resource Definitions provide a way of provisioning and destroying External Resources as needed by Environments. Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, it will be used to provision a new resource known as an Active Resource. In general, Active Resources are only deleted when their introductory Environment is deleted.

        Dynamic Resource Definitions provide a mapping between a Resource Type and a Resource Driver. The Resource Driver is code that is responsible for actually creating and destroying the resource. The Dynamic Resource Definition can also provide driver-specific configuration.

        A common use case is to provide a new database within a pre-existing database instance for dynamically created environments. For example, creating a Dynamic Resource Definition to provision Progressive’s Databases on a specific Google CloudSQL instance for Environments with type `development`. The Resource Definition would have a type of `postgres` and  driver-specific parameters defining the instance to create databases on.
      example:
        account: gcp-dev-cloudsql
        created_at: "2020-05-23T12:32:16Z"
        created_by: a.user@example.com
        criteria:
          - env_type: development
        driver_params:
          secrets:
            dbcredentials: "*****"
          values:
            instance: my-dev-project:my-region:dev-db
        driver_type: humanitec/cloudsql
        id: dev-postgres
        name: Dev Postgres Instance
        type: postgres
      properties:
        account_id:
          description: The ID of the account this resource is associated with.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        criteria:
          description: The criteria used for matching this StaticDefinition
          items:
            "$ref": "#/components/schemas/MatchingCriteriaRequest"
          type: array
        driver_params:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description:
            Parameters to be passed to the driver on every resource creation.
            (Note, this does not include resource parameters)
        driver_type:
          description: The type of the driver used to create the resource
          type: string
        id:
          description: The ID for this Resource Definition
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: A Human-friendly name for the Resource Definition
          type: string
        type:
          description: The type of the resource for this Definition
          type: string
      required:
        - id
        - name
        - type
        - criteria
        - driver_type
        - account_id
        - driver_params
      type: object
    DynamicDefinitionResponse:
      description: |-
        Dynamic Resource Definitions provide a way of provisioning and destroying External Resources as needed by Environments. Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, it will be used to provision a new resource known as an Active Resource. In general, Active Resources are only deleted when their introductory Environment is deleted.

        Dynamic Resource Definitions provide a mapping between a Resource Type and a Resource Driver. The Resource Driver is code that is responsible for actually creating and destroying the resource. The Dynamic Resource Definition can also provide driver-specific configuration.

        A common use case is to provide a new database within a pre-existing database instance for dynamically created environments. For example, creating a Dynamic Resource Definition to provision Progressive’s Databases on a specific Google CloudSQL instance for Environments with type `development`. The Resource Definition would have a type of `postgres` and  driver-specific parameters defining the instance to create databases on.
      example:
        account: gcp-dev-cloudsql
        created_at: "2020-05-23T12:32:16Z"
        created_by: a.user@example.com
        criteria:
          - env_type: development
        driver_params:
          secrets:
            dbcredentials: "*****"
          values:
            instance: my-dev-project:my-region:dev-db
        driver_type: humanitec/cloudsql
        id: dev-postgres
        name: Dev Postgres Instance
        type: postgres
      properties:
        account_id:
          description: The ID of the account this resource is associated with.
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        created_at:
          description: The timestamp of when this Resource Definition was first created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created this Resource Definition
          type: string
        criteria:
          description: The criteria used for matching this StaticDefinition
          items:
            "$ref": "#/components/schemas/MatchingCriteriaResponse"
          type: array
        driver_params:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description:
            Parameters to be passed to the driver on every resource creation.
            (Note, this does not include resource parameters)
        driver_type:
          description: The type of the driver used to create the resource
          type: string
        id:
          description: The ID for this Resource Definition
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        is_default:
          description:
            If true this resource is default (provided by Humanitec in
            demo purposes)
          type: boolean
        name:
          description: A Human-friendly name for the Resource Definition
          type: string
        pending_deletion:
          description:
            If true, the definition is still being referenced by an Active
            Resource. Once there are no more references, the definition will be removed.
          type: boolean
        type:
          description: The type of the resource for this Definition
          type: string
      required:
        - id
        - name
        - type
        - criteria
        - driver_type
        - account_id
        - driver_params
      type: object
    ManifestRequest:
      description:
        Manifest represents a complete or a partial Kubernetes manifest,
        and a location for its injection.
      properties:
        data:
          description: Manifest data to inject.
          type: object
        location:
          description: Location to inject the Manifest at.
          type: string
      type: object
    ManifestResponse:
      description:
        Manifest represents a complete or a partial Kubernetes manifest,
        and a location for its injection.
      properties:
        data:
          description: Manifest data to inject.
          type: object
        location:
          description: Location to inject the Manifest at.
          type: string
      type: object
    MatchingCriteriaRequest:
      description: |-
        Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.

        Matching criteria are made up in order of specificity with least specific first:

        - Environment Type (`env_type`)

        - Application (`app_id`)

        - Environment (`env_id`)

        - Resource (`res_id`)

        When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.

        **NOTE:**

        Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
      properties:
        app_id:
          description:
            "(Optional) The ID of the Application that the Resources should
            belong to."
          type: string
        env_id:
          description:
            "(Optional) The ID of the Environment that the Resources should
            belong to. If `env_type` is also set, it must match the Type of the Environment
            for the Criteria to match."
          type: string
        env_type:
          description:
            "(Optional) The Type of the Environment that the Resources
            should belong to. If `env_id` is also set, it must have an Environment
            Type that matches this parameter for the Criteria to match."
          type: string
        id:
          description: Matching Criteria ID
          type: string
        res_id:
          description:
            "(Optional) The ID of the Resource in the Deployment Set. The
            ID is normally a `.` separated path to the definition in the set, e.g.
            `modules.my-module.externals.my-database`."
          type: string
      type: object
    MatchingCriteriaResponse:
      description: |-
        Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.

        Matching criteria are made up in order of specificity with least specific first:

        - Environment Type (`env_type`)

        - Application (`app_id`)

        - Environment (`env_id`)

        - Resource (`res_id`)

        When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.

        **NOTE:**

        Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
      properties:
        app_id:
          description:
            "(Optional) The ID of the Application that the Resources should
            belong to."
          type: string
        env_id:
          description:
            "(Optional) The ID of the Environment that the Resources should
            belong to. If `env_type` is also set, it must match the Type of the Environment
            for the Criteria to match."
          type: string
        env_type:
          description:
            "(Optional) The Type of the Environment that the Resources
            should belong to. If `env_id` is also set, it must have an Environment
            Type that matches this parameter for the Criteria to match."
          type: string
        id:
          description: Matching Criteria ID
          type: string
        res_id:
          description:
            "(Optional) The ID of the Resource in the Deployment Set. The
            ID is normally a `.` separated path to the definition in the set, e.g.
            `modules.my-module.externals.my-database`."
          type: string
      type: object
    MatchingCriteriaRuleRequest:
      description: MatchingCriteriaRule describes Matching Criteria rules.
      properties:
        app_id:
          description:
            "(Optional) The ID of the Application that the Resources should
            belong to."
          type: string
        env_id:
          description:
            "(Optional) The ID of the Environment that the Resources should
            belong to. If `env_type` is also set, it must match the Type of the Environment
            for the Criteria to match."
          type: string
        env_type:
          description:
            "(Optional) The Type of the Environment that the Resources
            should belong to. If `env_id` is also set, it must have an Environment
            Type that matches this parameter for the Criteria to match."
          type: string
        res_id:
          description:
            "(Optional) The ID of the Resource in the Deployment Set. The
            ID is normally a `.` separated path to the definition in the set, e.g.
            `modules.my-module.externals.my-database`."
          type: string
      type: object
    MatchingCriteriaRuleResponse:
      description: MatchingCriteriaRule describes Matching Criteria rules.
      properties:
        app_id:
          description:
            "(Optional) The ID of the Application that the Resources should
            belong to."
          type: string
        env_id:
          description:
            "(Optional) The ID of the Environment that the Resources should
            belong to. If `env_type` is also set, it must match the Type of the Environment
            for the Criteria to match."
          type: string
        env_type:
          description:
            "(Optional) The Type of the Environment that the Resources
            should belong to. If `env_id` is also set, it must have an Environment
            Type that matches this parameter for the Criteria to match."
          type: string
        res_id:
          description:
            "(Optional) The ID of the Resource in the Deployment Set. The
            ID is normally a `.` separated path to the definition in the set, e.g.
            `modules.my-module.externals.my-database`."
          type: string
      type: object
    ResourceAccountRequest:
      description: |-
        ResourceAccount represents the account being used to access a resource.

        Resource Accounts hold credentials that are required to provision and manage resources.
      example:
        created_at: "2020-05-22T14:58:07Z"
        created_by: test-user
        id: gcp-dev-postgres
        is_default: false
        is_used: true
        name: GCP Dev Postgres
        type: gcp
      properties:
        created_at:
          description: The timestamp of when the account was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The ID of the user who created the account.
          type: string
        id:
          description:
            Unique identifier for the account (in scope of the organization
            it belongs to).
          type: string
        is_used:
          description:
            Indicates if this account is being used (referenced) by any
            resource definition.
          type: boolean
        name:
          description: Display name.
          type: string
        type:
          description: The type of the account
          type: string
      type: object
    ResourceAccountResponse:
      description: |-
        ResourceAccount represents the account being used to access a resource.

        Resource Accounts hold credentials that are required to provision and manage resources.
      example:
        created_at: "2020-05-22T14:58:07Z"
        created_by: test-user
        id: gcp-dev-postgres
        is_default: false
        is_used: true
        name: GCP Dev Postgres
        type: gcp
      properties:
        created_at:
          description: The timestamp of when the account was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The ID of the user who created the account.
          type: string
        id:
          description:
            Unique identifier for the account (in scope of the organization
            it belongs to).
          type: string
        is_used:
          description:
            Indicates if this account is being used (referenced) by any
            resource definition.
          type: boolean
        name:
          description: Display name.
          type: string
        type:
          description: The type of the account
          type: string
      type: object
    ResourceDefinitionChangeRequest:
      description:
        ResourceDefinitionChange describes the effects of a Resource Definition
        or Matching Criteria update/deletion.
      properties:
        app_id:
          description: The ID of the App the resource is associated with
          type: string
        env_id:
          description: The ID of the Environment the resource is associated with
          type: string
        from_def:
          description:
            The Resource Definition that this resource was provisioned
            from
          type: string
        res_id:
          description: The ID of the resource
          type: string
        to_def:
          description:
            The Resource Definition that resource *will be* provisioned
            from if the change is applied
          type: string
      type: object
    ResourceDefinitionChangeResponse:
      description:
        ResourceDefinitionChange describes the effects of a Resource Definition
        or Matching Criteria update/deletion.
      properties:
        app_id:
          description: The ID of the App the resource is associated with
          type: string
        env_id:
          description: The ID of the Environment the resource is associated with
          type: string
        from_def:
          description:
            The Resource Definition that this resource was provisioned
            from
          type: string
        res_id:
          description: The ID of the resource
          type: string
        to_def:
          description:
            The Resource Definition that resource *will be* provisioned
            from if the change is applied
          type: string
      type: object
    ResourceDefinitionRequest:
      description: |-
        A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.

        The schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.
      example:
        created_at: "2020-05-23T12:32:16Z"
        created_by: a.user@example.com
        criteria:
          - env_type: development
            id: "123456"
        driver_account: gcp-dev-cloudsql
        driver_inputs:
          values:
            instance: my-dev-project:my-region:dev-db
        driver_type: humanitec/postgres-cloudsql
        id: dev-postgres
        is_default: false
        is_deleted: false
        name: Dev Postgres Instance
        org_id: test-org
        type: postgres
      properties:
        created_at:
          description: The timestamp of when this record has been created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created this record.
          type: string
        criteria:
          description:
            "(Optional) The criteria to use when looking for a Resource
            Definition during the deployment."
          items:
            "$ref": "#/components/schemas/MatchingCriteriaRequest"
          type: array
        driver_account:
          description: "(Optional) Security account required by the driver."
          type: string
        driver_inputs:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description: "(Optional) Additional input data to be passed to the driver."
        driver_type:
          description: The driver to be used to create the resource.
          type: string
        id:
          description: The Resource Definition ID.
          type: string
        is_default:
          description: Indicates this definition is a built-in one (provided by Humanitec).
          type: boolean
        is_deleted:
          description:
            Indicates if this record has been marked for deletion. The
            Resource Definition that has been marked for deletion cannot be used to
            provision new resources.
          type: boolean
        name:
          description: The display name.
          type: string
        org_id:
          description: The Organization ID.
          type: string
        type:
          description: The Resource Type.
          type: string
      type: object
    ResourceDefinitionResponse:
      description: |-
        A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.

        The schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.
      example:
        created_at: "2020-05-23T12:32:16Z"
        created_by: a.user@example.com
        criteria:
          - env_type: development
            id: "123456"
        driver_account: gcp-dev-cloudsql
        driver_inputs:
          values:
            instance: my-dev-project:my-region:dev-db
        driver_type: humanitec/postgres-cloudsql
        id: dev-postgres
        is_default: false
        is_deleted: false
        name: Dev Postgres Instance
        org_id: test-org
        type: postgres
      properties:
        created_at:
          description: The timestamp of when this record has been created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created this record.
          type: string
        criteria:
          description:
            "(Optional) The criteria to use when looking for a Resource
            Definition during the deployment."
          items:
            "$ref": "#/components/schemas/MatchingCriteriaResponse"
          type: array
        driver_account:
          description: "(Optional) Security account required by the driver."
          type: string
        driver_inputs:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description: "(Optional) Additional input data to be passed to the driver."
        driver_type:
          description: The driver to be used to create the resource.
          type: string
        id:
          description: The Resource Definition ID.
          type: string
        is_default:
          description: Indicates this definition is a built-in one (provided by Humanitec).
          type: boolean
        is_deleted:
          description:
            Indicates if this record has been marked for deletion. The
            Resource Definition that has been marked for deletion cannot be used to
            provision new resources.
          type: boolean
        name:
          description: The display name.
          type: string
        org_id:
          description: The Organization ID.
          type: string
        type:
          description: The Resource Type.
          type: string
      type: object
    ResourceOutputsRequest:
      description:
        ResourceOutputs stores all the necessary information about the
        provisioned resource.
      example:
        def_id: default-humanitec-postgres
        id: modules.robot-walhall-debug.externals.postgres
        manifests: []
        resource:
          secrets:
            password: vault/path/to/secrets/./password
            user: vault/path/to/secrets/./user
          values:
            host: 127.0.0.1
            name: my-database
        status: pending|active|deleting
        type: postgres
      properties:
        def_id:
          description:
            The Resource Definitions ID that was used to provision the
            resource.
          type: string
        id:
          description: The resource ID.
          type: string
        manifests:
          description:
            The resource definition manifests (if any). Only available
            when status is 'active'.
          items:
            "$ref": "#/components/schemas/ManifestRequest"
          type: array
        resource:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description:
            The resource usage parameters and secrets. Only available when
            status is 'active'.
        status:
          description: "The resource availability status: pending, active, or deleting."
          type: string
        type:
          description: The type of the resource.
          type: string
      type: object
    ResourceOutputsResponse:
      description:
        ResourceOutputs stores all the necessary information about the
        provisioned resource.
      example:
        def_id: default-humanitec-postgres
        id: modules.robot-walhall-debug.externals.postgres
        manifests: []
        resource:
          secrets:
            password: vault/path/to/secrets/./password
            user: vault/path/to/secrets/./user
          values:
            host: 127.0.0.1
            name: my-database
        status: pending|active|deleting
        type: postgres
      properties:
        def_id:
          description:
            The Resource Definitions ID that was used to provision the
            resource.
          type: string
        id:
          description: The resource ID.
          type: string
        manifests:
          description:
            The resource definition manifests (if any). Only available
            when status is 'active'.
          items:
            "$ref": "#/components/schemas/ManifestResponse"
          type: array
        resource:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description:
            The resource usage parameters and secrets. Only available when
            status is 'active'.
        status:
          description: "The resource availability status: pending, active, or deleting."
          type: string
        type:
          description: The type of the resource.
          type: string
      type: object
    ResourceProvisionRequestRequest:
      description:
        ResourceProvisionRequest is the payload passed to the resource
        provisioner
      example:
        resource:
          host: 127.0.0.1
          name: my-database
        type: postgres
      properties:
        resource:
          additionalProperties:
            type: object
          description:
            "(Optional) The input parameters for the resource passed from
            the deployment set"
          type: object
        type:
          description: The resource type
          type: string
      required:
        - type
      type: object
    ResourceProvisionRequestResponse:
      description:
        ResourceProvisionRequest is the payload passed to the resource
        provisioner
      example:
        resource:
          host: 127.0.0.1
          name: my-database
        type: postgres
      properties:
        resource:
          additionalProperties:
            type: object
          description:
            "(Optional) The input parameters for the resource passed from
            the deployment set"
          type: object
        type:
          description: The resource type
          type: string
      required:
        - type
      type: object
    ResourceTypeRequest:
      description: |-
        Resources Types define the technology that Applications can have dependencies on.

        Each Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.
      example:
        inputs_schema:
          values:
            properties:
              extensions:
                additionalProperties:
                  properties:
                    schema:
                      type: string
                    version:
                      type: string
                  type: object
            type: object
        name: PostgreSQL
        outputs_schema:
          secrets:
            properties:
              password:
                type: string
              username:
                type: string
            required:
              - username
              - password
            type: object
          values:
            properties:
              host:
                type: string
              name:
                type: string
              port:
                maximum: 65535
                minimum: 0
                type: integer
            required:
              - name
              - host
              - port
            type: object
        type: postgres
      properties:
        category:
          description: Category name (used to group similar resources on the UI).
          type: string
        data_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the type-specific data
            passed to the deployment (output). Use 'outputs_schema' instead."
          type: object
        inputs_schema:
          additionalProperties:
            type: object
          description:
            A JSON Schema specifying the type-specific parameters for the
            driver (input).
          type: object
        name:
          description: Display name.
          type: string
        outputs_schema:
          additionalProperties:
            type: object
          description:
            A JSON Schema specifying the type-specific data passed to the
            deployment (output).
          type: object
        param_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the type-specific parameters
            for the driver (input). Use 'inputs_schema' instead."
          type: object
        type:
          description: Unique resource type identifier (system-wide, across all organizations).
          type: string
      type: object
    ResourceTypeResponse:
      description: |-
        Resources Types define the technology that Applications can have dependencies on.

        Each Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.
      example:
        inputs_schema:
          values:
            properties:
              extensions:
                additionalProperties:
                  properties:
                    schema:
                      type: string
                    version:
                      type: string
                  type: object
            type: object
        name: PostgreSQL
        outputs_schema:
          secrets:
            properties:
              password:
                type: string
              username:
                type: string
            required:
              - username
              - password
            type: object
          values:
            properties:
              host:
                type: string
              name:
                type: string
              port:
                maximum: 65535
                minimum: 0
                type: integer
            required:
              - name
              - host
              - port
            type: object
        type: postgres
      properties:
        category:
          description: Category name (used to group similar resources on the UI).
          type: string
        data_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the type-specific data
            passed to the deployment (output). Use 'outputs_schema' instead."
          type: object
        inputs_schema:
          additionalProperties:
            type: object
          description:
            A JSON Schema specifying the type-specific parameters for the
            driver (input).
          type: object
        name:
          description: Display name.
          type: string
        outputs_schema:
          additionalProperties:
            type: object
          description:
            A JSON Schema specifying the type-specific data passed to the
            deployment (output).
          type: object
        param_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the type-specific parameters
            for the driver (input). Use 'inputs_schema' instead."
          type: object
        type:
          description: Unique resource type identifier (system-wide, across all organizations).
          type: string
      type: object
    StaticDefinitionRequest:
      description: |-
        Static Resource Definitions provide a way of using External Resources that are not managed by Humanitec. (This is distinct from Dynamic Resource Definitions where the lifecycle is managed by Humanitec.) Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, the data required for the application to access the resource is returned. (As this data is defined and does not change, it is known as "static".)

        A common use case is to provide a DNS name for the production environment. The appropriate DNS name is pointed to the cluster load balancer. A Static Resource definition is then created so that the deployment knows what DNS name to configure Ingress for and the TLS certificates to use to secure the requests.
      example:
        created_at: "2020-05-22T14:58:07Z"
        created_by: a.user@example.com
        criteria:
          - env_id: production
        data:
          secrets:
            tls: "******"
          values:
            host: my-app.example.com
        driver_data: {}
        driver_type: empty
        id: prod-dns
        is_default: false
        name: Production DNS
        pending_deletion: false
        type: dns
      properties:
        criteria:
          description: The criteria used for matching this StaticDefinition
          items:
            "$ref": "#/components/schemas/MatchingCriteriaRequest"
          type: array
        data:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description:
            What would be returned as the output of type. Must match the
            Schema specified in the Resource Type
        driver_data:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description:
            What would be returned as the output of the driver. Must match
            the Schema specified in the Driver Type.
        driver_type:
          description:
            The Type of the driver. Can be `"empty"` to specify no driver
            needed.
          type: string
        id:
          description: The ID for this Resource Definition
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        name:
          description: A Human-friendly name for the Resource Definition
          type: string
        type:
          description: The type of the resource for this Definition
          type: string
      required:
        - id
        - name
        - type
        - criteria
        - data
        - driver_type
        - driver_data
      type: object
    StaticDefinitionResponse:
      description: |-
        Static Resource Definitions provide a way of using External Resources that are not managed by Humanitec. (This is distinct from Dynamic Resource Definitions where the lifecycle is managed by Humanitec.) Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, the data required for the application to access the resource is returned. (As this data is defined and does not change, it is known as "static".)

        A common use case is to provide a DNS name for the production environment. The appropriate DNS name is pointed to the cluster load balancer. A Static Resource definition is then created so that the deployment knows what DNS name to configure Ingress for and the TLS certificates to use to secure the requests.
      example:
        created_at: "2020-05-22T14:58:07Z"
        created_by: a.user@example.com
        criteria:
          - env_id: production
        data:
          secrets:
            tls: "******"
          values:
            host: my-app.example.com
        driver_data: {}
        driver_type: empty
        id: prod-dns
        is_default: false
        name: Production DNS
        pending_deletion: false
        type: dns
      properties:
        created_at:
          description: The timestamp of when this Resource Definition was first created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The user who created this Resource Definition
          type: string
        criteria:
          description: The criteria used for matching this StaticDefinition
          items:
            "$ref": "#/components/schemas/MatchingCriteriaResponse"
          type: array
        data:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description:
            What would be returned as the output of type. Must match the
            Schema specified in the Resource Type
        driver_data:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description:
            What would be returned as the output of the driver. Must match
            the Schema specified in the Driver Type.
        driver_type:
          description:
            The Type of the driver. Can be `"empty"` to specify no driver
            needed.
          type: string
        id:
          description: The ID for this Resource Definition
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        is_default:
          description:
            If true this resource is default (provided by Humanitec in
            demo purposes)
          type: boolean
        name:
          description: A Human-friendly name for the Resource Definition
          type: string
        pending_deletion:
          description:
            If true, the definition is still being referenced by an Active
            Resource. Once there are no more references, the definition will be removed.
          type: boolean
        type:
          description: The type of the resource for this Definition
          type: string
      required:
        - id
        - name
        - type
        - criteria
        - data
        - driver_type
        - driver_data
      type: object
    UpdateDriverRequestRequest:
      description: UpdateDriverRequest describes the update driver details request.
      example:
        account_types:
          - gcp
          - aws
        inputs_schema: {}
        is_public: false
        type: dns
        url_prefix: https://drivers.example.com/route53/
      properties:
        account_types:
          description: List of resources accounts types supported by the driver
          items:
            type: string
          type: array
        inputs_schema:
          additionalProperties:
            type: object
          description: A JSON Schema specifying the driver-specific input parameters.
          type: object
        is_public:
          description: Defines whether this driver is accessible to all Organizations.
          type: boolean
        param_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the driver-specific input
            parameters. Use 'inputs_schema' instead."
          type: object
        type:
          description: The type of resource produced by this driver
          type: string
        url_prefix:
          description:
            The prefix where the driver resides. Only members of the organization
            the driver belongs to can see 'url_prefix'.
          type: string
      type: object
    UpdateDriverRequestResponse:
      description: UpdateDriverRequest describes the update driver details request.
      example:
        account_types:
          - gcp
          - aws
        inputs_schema: {}
        is_public: false
        type: dns
        url_prefix: https://drivers.example.com/route53/
      properties:
        account_types:
          description: List of resources accounts types supported by the driver
          items:
            type: string
          type: array
        inputs_schema:
          additionalProperties:
            type: object
          description: A JSON Schema specifying the driver-specific input parameters.
          type: object
        is_public:
          description: Defines whether this driver is accessible to all Organizations.
          type: boolean
        param_schema:
          additionalProperties:
            type: object
          description:
            "DEPRECATED: A JSON Schema specifying the driver-specific input
            parameters. Use 'inputs_schema' instead."
          type: object
        type:
          description: The type of resource produced by this driver
          type: string
        url_prefix:
          description:
            The prefix where the driver resides. Only members of the organization
            the driver belongs to can see 'url_prefix'.
          type: string
      type: object
    UpdateResourceAccountRequestRequest:
      description:
        UpdateResourceAccountRequest describes the request to update the
        security account details.
      example:
        credentials:
          password: "***"
          username: "***"
        name: GCP Dev Postgres
      properties:
        credentials:
          additionalProperties:
            type: object
          description: Credentials associated with the account.
          type: object
        name:
          description: Display name.
          type: string
      type: object
    UpdateResourceAccountRequestResponse:
      description:
        UpdateResourceAccountRequest describes the request to update the
        security account details.
      example:
        credentials:
          password: "***"
          username: "***"
        name: GCP Dev Postgres
      properties:
        credentials:
          additionalProperties:
            type: object
          description: Credentials associated with the account.
          type: object
        name:
          description: Display name.
          type: string
      type: object
    UpdateResourceDefinitionRequestRequest:
      description:
        UpdateResourceDefinitionRequest describes a ResourceDefinition
        change request.
      example:
        driver_account: gcp-dev-cloudsql
        driver_inputs:
          secrets:
            dbcredentials:
              password: "***"
              username: "***"
          values:
            instance: my-dev-project:my-region:dev-db
      properties:
        driver_account:
          description: "(Optional) Security account required by the driver."
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        driver_inputs:
          "$ref": "#/components/schemas/ValuesSecretsRequest"
          description: "(Optional) Additional input data to be passed to the driver."
      type: object
    UpdateResourceDefinitionRequestResponse:
      description:
        UpdateResourceDefinitionRequest describes a ResourceDefinition
        change request.
      example:
        driver_account: gcp-dev-cloudsql
        driver_inputs:
          secrets:
            dbcredentials:
              password: "***"
              username: "***"
          values:
            instance: my-dev-project:my-region:dev-db
      properties:
        driver_account:
          description: "(Optional) Security account required by the driver."
          pattern: "^[a-z0-9][a-z0-9-]+[a-z0-9]$"
          type: string
        driver_inputs:
          "$ref": "#/components/schemas/ValuesSecretsResponse"
          description: "(Optional) Additional input data to be passed to the driver."
      type: object
    ValuesSecretsRequest:
      description:
        ValuesSecrets stores data that should be passed around split by
        sensitivity.
      example:
        secrets:
          password: vault/path/to/data/.secrets/password
          user: vault/path/to/data/.secrets/user
        values:
          host: 127.0.0.1
          name: my-database
      properties:
        secrets:
          additionalProperties:
            type: object
          description:
            Secrets section of the data set. Sensitive information is stored
            in the Vault and replaced with the Vault paths when sent outside.
          type: object
        values:
          additionalProperties:
            type: object
          description: Values section of the data set. Passed around as-is.
          type: object
      type: object
    ValuesSecretsResponse:
      description:
        ValuesSecrets stores data that should be passed around split by
        sensitivity.
      example:
        secrets:
          password: vault/path/to/data/.secrets/password
          user: vault/path/to/data/.secrets/user
        values:
          host: 127.0.0.1
          name: my-database
      properties:
        secrets:
          additionalProperties:
            type: object
          description:
            Secrets section of the data set. Sensitive information is stored
            in the Vault and replaced with the Vault paths when sent outside.
          type: object
        values:
          additionalProperties:
            type: object
          description: Values section of the data set. Passed around as-is.
          type: object
      type: object
    ControllerRequest:
      description: Controller represents deployment, stateful set etc
      properties:
        kind:
          type: string
        pods:
          items:
            "$ref": "#/components/schemas/PodStateRequest"
          type: array
        replicas:
          type: integer
        status:
          type: string
      type: object
    ControllerResponse:
      description: Controller represents deployment, stateful set etc
      properties:
        kind:
          type: string
        pods:
          items:
            "$ref": "#/components/schemas/PodStateResponse"
          type: array
        replicas:
          type: integer
        status:
          type: string
      type: object
    ModuleRequest:
      additionalProperties:
        "$ref": "#/components/schemas/ControllerRequest"
      description:
        Module represents a collection of workload controllers (deployments/statefulsets/etc)
        for the module
      type: object
    ModuleResponse:
      additionalProperties:
        "$ref": "#/components/schemas/ControllerResponse"
      description:
        Module represents a collection of workload controllers (deployments/statefulsets/etc)
        for the module
      type: object
    PodStateRequest:
      description: PodState represents single pod status
      properties:
        containerStatuses:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        phase:
          type: string
        podName:
          type: string
        revision:
          type: integer
        status:
          type: string
      type: object
    PodStateResponse:
      description: PodState represents single pod status
      properties:
        containerStatuses:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        phase:
          type: string
        podName:
          type: string
        revision:
          type: integer
        status:
          type: string
      type: object
    RuntimeInfoRequest:
      description:
        RuntimeInfo object returned by the runtime endpoint. Represents
        a list post statuses grouped by modules and controllers (deployments and stateful
        sets).
      properties:
        modules:
          additionalProperties:
            "$ref": "#/components/schemas/ModuleRequest"
          type: object
        namespace:
          type: string
      type: object
    RuntimeInfoResponse:
      description:
        RuntimeInfo object returned by the runtime endpoint. Represents
        a list post statuses grouped by modules and controllers (deployments and stateful
        sets).
      properties:
        modules:
          additionalProperties:
            "$ref": "#/components/schemas/ModuleResponse"
          type: object
        namespace:
          type: string
      type: object
    HumanitecErrorRequest:
      description: HumanitecError represents a standard Humanitec Error
      example:
        error: Could not validate token.
      properties:
        error:
          type: string
          description: A short code to help with error identification.
        details:
          additionalProperties:
            type: object
          description: Additional information is enclosed here.
          type: object
        message:
          description: A Human readable message about the error.
          type: string
      type: object
    HumanitecErrorResponse:
      description: HumanitecError represents a standard Humanitec Error
      example:
        error: Could not validate token.
      properties:
        error:
          type: string
          description: A short code to help with error identification.
        details:
          additionalProperties:
            type: object
          description: Additional information is enclosed here.
          type: object
        message:
          description: A Human readable message about the error.
          type: string
      type: object
    IdentityTokenRequest:
      description:
        IdentityToken holds the Identity providers temporary token along
        with the provider it is associated to.
      example:
        provider: github
        token: a7a04740ae985f12af58545e4edbac6a
      properties:
        provider:
          type: string
        token:
          type: string
      type: object
    IdentityTokenResponse:
      description:
        IdentityToken holds the Identity providers temporary token along
        with the provider it is associated to.
      example:
        provider: github
        token: a7a04740ae985f12af58545e4edbac6a
      properties:
        provider:
          type: string
        token:
          type: string
      type: object
    LegacyTokenRequestRequest:
      properties:
        id:
          type: string
        label:
          type: string
        org_id:
          type: string
      type: object
    LegacyTokenRequestResponse:
      properties:
        id:
          type: string
        label:
          type: string
        org_id:
          type: string
      type: object
    NewServiceUserRequest:
      description: NewServiceUser holds the definition of a new service user.
      example:
        email: ci-service-notifications@awesomecorp.com
        name: CI Robot
        role: artefactContributer
      properties:
        email:
          description:
            The email address that should get notifications about this
            service user. (Optional)
          type: string
        name:
          description: The name that should be shown for this service user.
          type: string
        role:
          description:
            The role that the service user should have on the organization
            it is created in
          type: string
      type: object
    NewServiceUserResponse:
      description: NewServiceUser holds the definition of a new service user.
      example:
        email: ci-service-notifications@awesomecorp.com
        name: CI Robot
        role: artefactContributer
      properties:
        email:
          description:
            The email address that should get notifications about this
            service user. (Optional)
          type: string
        name:
          description: The name that should be shown for this service user.
          type: string
        role:
          description:
            The role that the service user should have on the organization
            it is created in
          type: string
      type: object
    RegisterIdentityTokenRequest:
      description:
        RegisterIdentityToken holds the Identity providers temporary token
        along with the provider it is associated to. It also has a required field
        of `privacy_policy_accepted`.
      example:
        privacy_policy_accepted: true
        provider: github
        token: a7a04740ae985f12af58545e4edbac6a
      properties:
        privacy_policy_accepted:
          type: boolean
        provider:
          type: string
        signup_ref:
          description: "(optional) The reference to the source of the signup."
          type: string
        token:
          type: string
      type: object
    RegisterIdentityTokenResponse:
      description:
        RegisterIdentityToken holds the Identity providers temporary token
        along with the provider it is associated to. It also has a required field
        of `privacy_policy_accepted`.
      example:
        privacy_policy_accepted: true
        provider: github
        token: a7a04740ae985f12af58545e4edbac6a
      properties:
        privacy_policy_accepted:
          type: boolean
        provider:
          type: string
        signup_ref:
          description: "(optional) The reference to the source of the signup."
          type: string
        token:
          type: string
      type: object
    TokenDefinitionRequest:
      description: Defines the token to be created.
      example:
        description: Humanitec API Calls from CircleCI Pipelines
        expires_at: 2022-04-30T19:47:01UTC
        id: circle-ci-token
        type: static
      properties:
        description:
          type: string
        expires_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        id:
          type: string
        type:
          type: string
      type: object
    TokenDefinitionResponse:
      description: Defines the token to be created.
      example:
        description: Humanitec API Calls from CircleCI Pipelines
        expires_at: 2022-04-30T19:47:01UTC
        id: circle-ci-token
        type: static
      properties:
        description:
          type: string
        expires_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        id:
          type: string
        type:
          type: string
      type: object
    TokenInfoRequest:
      description:
        Holds metadata about a token. `expires_at` is excluded if token
        does not expire.
      example:
        created_at: 2021-04-30T19:47:01UTC
        description: Humanitec API Calls from CircleCI Pipelines
        expires_at: 2022-04-30T19:47:01UTC
        id: circle-ci-token
        type: static
        user_id: a7a04740ae985f12af58545e4edbac6a
      properties:
        created_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          type: string
        description:
          type: string
        expires_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        id:
          type: string
        type:
          type: string
      type: object
    TokenInfoResponse:
      description:
        Holds metadata about a token. `expires_at` is excluded if token
        does not expire.
      example:
        created_at: 2021-04-30T19:47:01UTC
        description: Humanitec API Calls from CircleCI Pipelines
        expires_at: 2022-04-30T19:47:01UTC
        id: circle-ci-token
        type: static
        user_id: a7a04740ae985f12af58545e4edbac6a
      properties:
        created_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          type: string
        description:
          type: string
        expires_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        id:
          type: string
        type:
          type: string
      type: object
    TokenRequest:
      description: Token holds the token and its type.
      example:
        token: a7a04740ae985f12af58545e4edbac6a
        type: jwt
      properties:
        token:
          type: string
        type:
          type: string
      type: object
    TokenResponse:
      description: Token holds the token and its type.
      example:
        token: a7a04740ae985f12af58545e4edbac6a
        type: jwt
      properties:
        token:
          type: string
        type:
          type: string
      type: object
    UserInviteRequest:
      description: UserInvite stores the invitation details.
      example:
        created_at: "2020-12-19T09:32:46Z"
        created_by: admin-user-id
        email: jo.trigg@awesomecorp.com
        expires_at: "2020-12-30T09:32:46Z"
        user_id: new-user-id
      properties:
        created_at:
          description: The timestamp this invitation was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The ID of the user who created this invitation.
          type: string
        email:
          description: The email address of the user from the profile.
          type: string
        expires_at:
          description: The timestamp this invitation would expire.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        user_id:
          description: The User ID for this user.
          type: string
      type: object
    UserInviteRequestRequest:
      description: UserInviteRequest describes a new user invitation.
      example:
        email: jo.trigg@awesomecorp.com
        role: manager
      properties:
        email:
          description: The email address of the user from the profile.
          type: string
        role:
          description: The role that this user would hold.
          type: string
      required:
        - email
        - role
      type: object
    UserInviteRequestResponse:
      description: UserInviteRequest describes a new user invitation.
      example:
        email: jo.trigg@awesomecorp.com
        role: manager
      properties:
        email:
          description: The email address of the user from the profile.
          type: string
        role:
          description: The role that this user would hold.
          type: string
      required:
        - email
        - role
      type: object
    UserInviteResponse:
      description: UserInvite stores the invitation details.
      example:
        created_at: "2020-12-19T09:32:46Z"
        created_by: admin-user-id
        email: jo.trigg@awesomecorp.com
        expires_at: "2020-12-30T09:32:46Z"
        user_id: new-user-id
      properties:
        created_at:
          description: The timestamp this invitation was created.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: The ID of the user who created this invitation.
          type: string
        email:
          description: The email address of the user from the profile.
          type: string
        expires_at:
          description: The timestamp this invitation would expire.
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        user_id:
          description: The User ID for this user.
          type: string
      type: object
    UserProfileExtendedRequest:
      description:
        UserProfileExtended holds the profile information of a user including
        properties only accessible to the user.
      example:
        created_at: "2020-12-19T09:32:46Z"
        email: jo.trigg@awesomecorp.com
        id: d510224a-4641-48fd-8054-68efd3537ee2
        name: Jo Trigg
        properties:
          dont_show_welcome_screen: true
      properties:
        created_at:
          description: The time the user was first registered with Humanitec
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        email:
          description: The email address of the user from the profile
          type: string
        id:
          description: The User ID for this user
          type: string
        name:
          description: The name the user goes by
          type: string
        properties:
          additionalProperties:
            type: object
          type: object
        roles:
          additionalProperties:
            type: string
          type: object
      type: object
    UserProfileExtendedResponse:
      description:
        UserProfileExtended holds the profile information of a user including
        properties only accessible to the user.
      example:
        created_at: "2020-12-19T09:32:46Z"
        email: jo.trigg@awesomecorp.com
        id: d510224a-4641-48fd-8054-68efd3537ee2
        name: Jo Trigg
        properties:
          dont_show_welcome_screen: true
      properties:
        created_at:
          description: The time the user was first registered with Humanitec
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        email:
          description: The email address of the user from the profile
          type: string
        id:
          description: The User ID for this user
          type: string
        name:
          description: The name the user goes by
          type: string
        properties:
          additionalProperties:
            type: object
          type: object
        roles:
          additionalProperties:
            type: string
          type: object
      type: object
    UserProfileRequest:
      description: UserProfile holds the profile information of a user
      example:
        created_at: "2020-12-19T09:32:46Z"
        email: jo.trigg@awesomecorp.com
        id: d510224a-4641-48fd-8054-68efd3537ee2
        name: Jo Trigg
      properties:
        created_at:
          description: The time the user was first registered with Humanitec
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        email:
          description: The email address of the user from the profile
          type: string
        id:
          description: The User ID for this user
          type: string
        name:
          description: The name the user goes by
          type: string
      type: object
    UserProfileResponse:
      description: UserProfile holds the profile information of a user
      example:
        created_at: "2020-12-19T09:32:46Z"
        email: jo.trigg@awesomecorp.com
        id: d510224a-4641-48fd-8054-68efd3537ee2
        name: Jo Trigg
      properties:
        created_at:
          description: The time the user was first registered with Humanitec
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        email:
          description: The email address of the user from the profile
          type: string
        id:
          description: The User ID for this user
          type: string
        name:
          description: The name the user goes by
          type: string
      type: object
    ValueRequest:
      description: |-
        Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.

        Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.

        For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
      example:
        description: The message to show me.
        is_secret: false
        key: MY_MSG
        value: Hello World
      properties:
        description:
          description: A Human friendly description of what the Shared Value is.
          type: string
        is_secret:
          description: Specified that the Shared Value contains a secret.
          type: boolean
        key:
          description:
            "The unique key by which the Shared Value can be referenced.
            pattern: ^[a-zA-Z0-9._-]+$."
          type: string
        value:
          description: The value that will be stored. (Will be always empty for secrets.)
          type: string
      type: object
    ValueResponse:
      description: |-
        Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.

        Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.

        For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
      example:
        description: The message to show me.
        is_secret: false
        key: MY_MSG
        value: Hello World
      properties:
        created_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        description:
          description: A Human friendly description of what the Shared Value is.
          type: string
        is_secret:
          description: Specified that the Shared Value contains a secret.
          type: boolean
        key:
          description:
            "The unique key by which the Shared Value can be referenced.
            pattern: ^[a-zA-Z0-9._-]+$."
          type: string
        source:
          type: string
        updated_at:
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        value:
          description: The value that will be stored. (Will be always empty for secrets.)
          type: string
      type: object
    WorkloadProfileRequest:
      description: |-
        Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.

        Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
      properties:
        id:
          description: Workload Profile ID
          type: string
      required:
        - id
      type: object
    WorkloadProfileResponse:
      description: |-
        Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.

        Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
      properties:
        created_at:
          description: Creation date
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: User created the profile
          type: string
        id:
          description: Workload Profile ID
          type: string
        latest:
          description: The latest version of the profile
          type: string
        org_id:
          description: Organization ID
          type: string
      required:
        - id
      type: object
    WorkloadProfileVersionRequest:
      description:
        Each Workload Profile has one or more Versions associated with
        it. In order to add a version, a Workload Profile must first be created.
      properties:
        features:
          additionalProperties:
            type: object
          description: |-
            A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.

            {

            }
          type: object
        notes:
          description: Notes
          type: string
      type: object
    WorkloadProfileVersionResponse:
      description:
        Each Workload Profile has one or more Versions associated with
        it. In order to add a version, a Workload Profile must first be created.
      properties:
        created_at:
          description: Creation date
          example: "2020-06-22T09:37:23.523Z"
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$"
          title: Simplified extended ISO format date/time string.
          type: string
        created_by:
          description: User created the profile
          type: string
        features:
          additionalProperties:
            type: object
          description: |-
            A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.

            {

            }
          type: object
        notes:
          description: Notes
          type: string
        org_id:
          description: Organization ID
          type: string
        profile_id:
          description: Workload Profile ID
          type: string
        version:
          description: Version
          type: string
      type: object
externalDocs:
  description:
    Find out more about how to use Humanitec in your every-day development
    work.
  url: https://docs.humanitec.com
x-tagGroups:
  - name: Core
    tags:
      - Application
      - Deployment
      - EnvironmentType
      - Environment
      - ImageSource
      - Image
      - Organization
      - Registry
      - RuntimeInfo
      - Value
  - name: App Configuration
    tags:
      - Delta
      - Set
      - WorkloadProfile
  - name: Resources
    tags:
      - ActiveResource
      - DriverDefinition
      - MatchingCriteria
      - ResourceDefinition
      - ResourceAccount
      - ResourceType
  - name: Automation
    tags:
      - AutomationRule
      - Webhook
  - name: Users
    tags:
      - UserProfile
      - UserRole
tags:
  - name: AccountType
    x-displayName: Account Types
    description: |
      Resource Account Types define cloud providers or protocols to which a resource account can belong.
      <SchemaDefinition schemaRef="#/components/schemas/AccountTypeRequest" />
  - name: ActiveResource
    x-displayName: Active Resources
    description: |
      Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.

      Active Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.
      <SchemaDefinition schemaRef="#/components/schemas/ActiveResourceRequest" />
  - name: Application
    x-displayName: Applications
    description: |
      An Application is a collection of Modules that work together. When deployed, all Modules in an Application are deployed to the same namespace.

      Apps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.
      <SchemaDefinition schemaRef="#/components/schemas/ApplicationRequest" />
  - name: AutomationRule
    x-displayName: Automation Rules
    description: |
      An Automation Rule defining how and when images in an environment should be updated.
      <SchemaDefinition schemaRef="#/components/schemas/AutomationRuleRequest" />
  - name: Delta
    x-displayName: Deployment Deltas
    description: |
      A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.

      Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.

      **Basic Structure**

      ```
       {
         "id": <ID of the Deployment Delta.>,
         "metadata": {
           <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
         }
         "modules" : {
           "add" : {
             <ID of Module to add to the Deployment Set> : {
               <An entire Modules object>
             }
           },
           "remove": [
             <An array of Module IDs that should be removed from the Deployment Set>
           ],
          "update": {
             <ID of Module already in the Set to be updated> : [
               <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
             ]
           }
         }
       }
      ```
      <SchemaDefinition schemaRef="#/components/schemas/DeltaRequest" />
  - name: Deployment
    x-displayName: Deployments
    description: |
      Deployments represent updates to the running state of an Environment.

      Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
      <SchemaDefinition schemaRef="#/components/schemas/DeploymentRequest" />
  - name: DriverDefinition
    x-displayName: Resource Drivers
    description: |
      DriverDefinition describes the resource driver.

      Resource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.
      <SchemaDefinition schemaRef="#/components/schemas/DriverDefinitionRequest" />
  - name: Environment
    x-displayName: Environments
    description: |
      Environments are independent spaces where Applications can run. An Application is always deployed into an Environment.
      <SchemaDefinition schemaRef="#/components/schemas/EnvironmentRequest" />
  - name: EnvironmentType
    x-displayName: Environment Types
    description: |
      Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.

      Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
      <SchemaDefinition schemaRef="#/components/schemas/EnvironmentTypeRequest" />
  - name: Image
    x-displayName: Images
    description: |
      Container Images (known simply as Images) can be registered with Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec when a new build of a Container Image becomes available. Humanitec tracks the Image along with metadata about how it was built.
      <SchemaDefinition schemaRef="#/components/schemas/ImageRequest" />
  - name: ImageSource
    x-displayName: Image Sources
    description: |
      An Image Source is a way to organize how Images are registered through the platform. Each Image Source has an associated token which can be used to authenticate notification requests.

      It is recommended that each separate system that notifies Humanitec of new Image Builds should have its own Image Source. This provides both security and management benefits. From the security perspective, if the token is compromised, only one system needs to be updated to update the token to a new one. From a management perspective, it can be useful to get an overview of where Image builds come from.
      <SchemaDefinition schemaRef="#/components/schemas/ImageSourceRequest" />
  - name: MatchingCriteria
    x-displayName: MatchingCriteria
    description: |
      Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.

      Matching criteria are made up in order of specificity with least specific first:

      - Environment Type (`env_type`)

      - Application (`app_id`)

      - Environment (`env_id`)

      - Resource (`res_id`)

      When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.

      **NOTE:**

      Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
      <SchemaDefinition schemaRef="#/components/schemas/MatchingCriteriaRequest" />
  - name: Organization
    x-displayName: Organization
    description: |
      An Organization is the top level object in Humanitec. All other objects belong to an Organization.
      <SchemaDefinition schemaRef="#/components/schemas/OrganizationRequest" />
  - name: Registry
    x-displayName: Registry
    description: |
      Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.

      Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
      <SchemaDefinition schemaRef="#/components/schemas/RegistryRequest" />
  - name: Replicas
    x-displayName: Replicas
    description: |
      null
      <SchemaDefinition schemaRef="#/components/schemas/ReplicasRequest" />
  - name: ResourceAccount
    x-displayName: Resource Accounts
    description: |
      ResourceAccount represents the account being used to access a resource.

      Resource Accounts hold credentials that are required to provision and manage resources.
      <SchemaDefinition schemaRef="#/components/schemas/ResourceAccountRequest" />
  - name: ResourceDefinition
    x-displayName: Definitions
    description: |
      A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.

      The schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.
      <SchemaDefinition schemaRef="#/components/schemas/ResourceDefinitionRequest" />
  - name: ResourceType
    x-displayName: Resources Types
    description: |
      Resources Types define the technology that Applications can have dependencies on.

      Each Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.
      <SchemaDefinition schemaRef="#/components/schemas/ResourceTypeRequest" />
  - name: RuntimeInfo
    x-displayName: Runtime Information
    description: |
      RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).
      <SchemaDefinition schemaRef="#/components/schemas/RuntimeInfoRequest" />
  - name: RuntimeInfo
    x-displayName: Runtime Info
    description: |
      RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).
      <SchemaDefinition schemaRef="#/components/schemas/RuntimeInfoRequest" />
  - name: Set
    x-displayName: Deployment Sets
    description: |
      A Deployment Set (or just "Set") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.

      Deployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.

      Deployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.

      **Basic Structure**

      ```
       {
         "id": <ID of the Deployment Set>,
         "modules" : {
           <ID of Module> : {
             "profile": <Defines how the optional "spec" property is interpreted>
             "spec": {
               <Properties that depend on the "profile" property.>
             }
             "externals": {
               <External Resource Name> : {
                 "type": <Resource Type>,
                 "params": {
                   <Properties which parametrize the resource depending on the Resource Type.>
                 }
               }
             }
           }
         }
       }
      ```

      For details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].
      <SchemaDefinition schemaRef="#/components/schemas/SetRequest" />
  - name: UserProfile
    x-displayName: User Profiles
    description: |
      UserProfile holds the profile information of a user
      <SchemaDefinition schemaRef="#/components/schemas/UserProfileRequest" />
  - name: UserRole
    x-displayName: User Roles
    description: |
      UserRole holds the mapping of role to user for a particular object.
      <SchemaDefinition schemaRef="#/components/schemas/UserRoleRequest" />
  - name: Value
    x-displayName: Shared Values
    description: |
      Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.

      Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.

      For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
      <SchemaDefinition schemaRef="#/components/schemas/ValueRequest" />
  - name: Webhook
    x-displayName: Webhooks
    description: |
      Webhook is a special type of a Job, it performs a HTTPS request to a specified URL with specified headers.
      <SchemaDefinition schemaRef="#/components/schemas/WebhookRequest" />
  - name: WorkloadProfile
    x-displayName: Workload Profiles
    description: |
      Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.

      Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
      <SchemaDefinition schemaRef="#/components/schemas/WorkloadProfileRequest" />
